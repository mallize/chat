{"version":3,"sources":["../../src/logic/or.js"],"names":["or","values","next","done","value","prev","undefined"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAMA,EAAE,GAAG,qBACT,CADS,EAET,mBAAK,IAAL,EAAW,CAAC,GAAGC,MAAJ,KACT,sBAASC,IAAD,IAAU;AAChB,MAAIA,IAAI,CAACC,IAAT,EAAe;AACb,6BACKD,IADL;AAEEE,MAAAA,KAAK,EAAEF,IAAI,CAACG,IAAL,IAAa,IAAb,GAAoBH,IAAI,CAACG,IAAL,CAAUD,KAA9B,GAAsCE;AAF/C;AAID;;AACD,MAAI,CAAC,CAACJ,IAAI,CAACE,KAAX,EAAkB;AAChB,6BACKF,IADL;AAEEC,MAAAA,IAAI,EAAE;AAFR;AAID;;AACD,SAAOD,IAAP;AACD,CAdD,EAcGD,MAdH,CADF,CAFS,CAAX;eAqBeD,E","sourcesContent":["import curryN from '../common/curryN'\nimport defn from '../common/defn'\nimport iterate from '../common/iterate'\n\n/**\n * Returns `true` if one or both of its arguments are `true`. Returns `false` if both arguments are `false`.\n *\n * This method resolves both parameters before executing.\n *\n * This method will automatically upgrade to async if a Promise is received for either value.\n *\n * @function\n * @since v0.0.13\n * @category logic\n * @param {*} valueA\n * @param {*} valueB\n * @returns {*} the first argument if truthy, otherwise the second argument.\n * @example\n *\n * or(true, true) //=> true\n * or(true, false) //=> true\n * or(false, true) //=> true\n * or(false, false) //=> false\n * await or(Promise.resolve(false), false) //=> false\n */\nconst or = curryN(\n  2,\n  defn('or', (...values) =>\n    iterate((next) => {\n      if (next.done) {\n        return {\n          ...next,\n          value: next.prev != null ? next.prev.value : undefined\n        }\n      }\n      if (!!next.value) {\n        return {\n          ...next,\n          done: true\n        }\n      }\n      return next\n    }, values)\n  )\n)\n\nexport default or\n"],"file":"or.js"}