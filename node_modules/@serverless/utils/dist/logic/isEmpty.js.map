{"version":3,"sources":["../../src/logic/isEmpty.js"],"names":["isEmpty","value","splice","length","tag","size","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,MAAMA,OAAO,GAAG,oBACd,mBAAK,SAAL,EAAiBC,KAAD,IAAW;AACzB,MAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;AACD,MACE,0BAAYA,KAAZ,MACC,sBAAQA,KAAR,KACC,OAAOA,KAAP,IAAgB,QADjB,IAEC,OAAOA,KAAK,CAACC,MAAb,IAAuB,UAFxB,IAGC,uBAASD,KAAT,CAHD,IAIC,2BAAaA,KAAb,CAJD,IAKC,0BAAYA,KAAZ,CANF,CADF,EAQE;AACA,WAAO,CAACA,KAAK,CAACE,MAAd;AACD;;AACD,QAAMC,GAAG,GAAG,0BAAYH,KAAZ,CAAZ;;AACA,MAAIG,GAAG,IAAI,cAAP,IAAyBA,GAAG,IAAI,cAApC,EAAoD;AAClD,WAAO,CAACH,KAAK,CAACI,IAAd;AACD;;AACD,MAAI,0BAAYJ,KAAZ,CAAJ,EAAwB;AACtB,WAAO,CAAC,yBAAWA,KAAX,EAAkBE,MAA1B;AACD;;AACD,OAAK,MAAMG,GAAX,IAAkBL,KAAlB,EAAyB;AACvB,QAAI,mCAAqBA,KAArB,EAA4BK,GAA5B,CAAJ,EAAsC;AACpC,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CA5BD,CADc,CAAhB;eAgCeN,O","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport isArguments from '../lang/isArguments'\nimport isArray from '../lang/isArray'\nimport isArrayLike from '../lang/isArrayLike'\nimport isBuffer from '../lang/isBuffer'\nimport isPrototype from '../lang/isPrototype'\nimport isTypedArray from '../lang/isTypedArray'\nimport objectHasOwnProperty from '../lang/objectHasOwnProperty'\nimport objectKeys from '../lang/objectKeys'\nimport toStringTag from '../lang/toStringTag'\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n *\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * Auto curried for placeholder support.\n *\n * @function\n * @since v0.0.3\n * @category logic\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * isEmpty(null) // => true\n *\n * isEmpty(true) // => true\n *\n * isEmpty(1) // => true\n *\n * isEmpty([1, 2, 3]) // => false\n *\n * isEmpty('abc') // => false\n *\n * isEmpty({ 'a': 1 })  // => false\n */\nconst isEmpty = curry(\n  defn('isEmpty', (value) => {\n    if (value == null) {\n      return true\n    }\n    if (\n      isArrayLike(value) &&\n      (isArray(value) ||\n        typeof value == 'string' ||\n        typeof value.splice == 'function' ||\n        isBuffer(value) ||\n        isTypedArray(value) ||\n        isArguments(value))\n    ) {\n      return !value.length\n    }\n    const tag = toStringTag(value)\n    if (tag == '[object Map]' || tag == '[object Set]') {\n      return !value.size\n    }\n    if (isPrototype(value)) {\n      return !objectKeys(value).length\n    }\n    for (const key in value) {\n      if (objectHasOwnProperty(value, key)) {\n        return false\n      }\n    }\n    return true\n  })\n)\n\nexport default isEmpty\n"],"file":"isEmpty.js"}