"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _curry = _interopRequireDefault(require("../common/curry"));

var _defn = _interopRequireDefault(require("../common/defn"));

var _isArguments = _interopRequireDefault(require("../lang/isArguments"));

var _isArray = _interopRequireDefault(require("../lang/isArray"));

var _isArrayLike = _interopRequireDefault(require("../lang/isArrayLike"));

var _isBuffer = _interopRequireDefault(require("../lang/isBuffer"));

var _isPrototype = _interopRequireDefault(require("../lang/isPrototype"));

var _isTypedArray = _interopRequireDefault(require("../lang/isTypedArray"));

var _objectHasOwnProperty = _interopRequireDefault(require("../lang/objectHasOwnProperty"));

var _objectKeys = _interopRequireDefault(require("../lang/objectKeys"));

var _toStringTag = _interopRequireDefault(require("../lang/toStringTag"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 *
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * Auto curried for placeholder support.
 *
 * @function
 * @since v0.0.3
 * @category logic
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * isEmpty(null) // => true
 *
 * isEmpty(true) // => true
 *
 * isEmpty(1) // => true
 *
 * isEmpty([1, 2, 3]) // => false
 *
 * isEmpty('abc') // => false
 *
 * isEmpty({ 'a': 1 })  // => false
 */
const isEmpty = (0, _curry.default)((0, _defn.default)('isEmpty', value => {
  if (value == null) {
    return true;
  }

  if ((0, _isArrayLike.default)(value) && ((0, _isArray.default)(value) || typeof value == 'string' || typeof value.splice == 'function' || (0, _isBuffer.default)(value) || (0, _isTypedArray.default)(value) || (0, _isArguments.default)(value))) {
    return !value.length;
  }

  const tag = (0, _toStringTag.default)(value);

  if (tag == '[object Map]' || tag == '[object Set]') {
    return !value.size;
  }

  if ((0, _isPrototype.default)(value)) {
    return !(0, _objectKeys.default)(value).length;
  }

  for (const key in value) {
    if ((0, _objectHasOwnProperty.default)(value, key)) {
      return false;
    }
  }

  return true;
}));
var _default = isEmpty;
exports.default = _default;
//# sourceMappingURL=isEmpty.js.map