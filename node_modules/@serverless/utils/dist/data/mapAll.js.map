{"version":3,"sources":["../../src/data/mapAll.js"],"names":["mapAll","iteratee","collection","accum","value","kdx","all"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,MAAMA,MAAM,GAAG,oBACb,mBAAK,QAAL,EAAe,CAACC,QAAD,EAAWC,UAAX,KACb,mBACE,qBACE,CAACC,KAAD,EAAQC,KAAR,EAAeC,GAAf,KAAuB;AACrBF,EAAAA,KAAK,CAACE,GAAD,CAAL,GAAaJ,QAAQ,CAACG,KAAD,EAAQC,GAAR,CAArB;AACA,SAAOF,KAAP;AACD,CAJH,EAKE,0BAAYD,UAAZ,IAA0B,EAA1B,GAA+B,EALjC,CADF,EAQEI,YARF,EASEJ,UATF,CADF,CADa,CAAf;eAeeF,M","sourcesContent":["import all from '../common/all'\nimport curry from '../common/curry'\nimport defn from '../common/defn'\nimport isArrayLike from '../lang/isArrayLike'\nimport pipe from '../common/pipe'\nimport reduce from './reduce'\n\n// TODO BRN: Performance of this method can be improved by not collecting all the Promises into a new object when resolving them. Instead we should use either generators or transducers to process each value.\n\n/**\n * Takes a function and a [functor](https://github.com/fantasyland/fantasy-land#functor), applies the function to each of the functor's values, and returns  a functor of the same shape.\n *\n * Provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `mapAll` method of the second argument, if present.\n *\n * This method automatically upgrades to async.\n * - If the `iteratee` or the `collection` arguments are Promises, this method will resolve those values before executing and this method will return a `Promise`.\n * - If the `iteratee` returns a `Promise`, this method will reutrn a `Promise`\n *\n * This method executes in **parallel**. If the iteratee returns a `Promise`, it will NOT wait till the `Promise` resolves before it executes the next iteration.\n *\n * @function\n * @since v0.0.19\n * @category data\n * @param {Function} iteratee The function to be called on every element of the input `list`.\n * @param {*} collection The collection to be iterated over.\n * @return {*} The new collection.\n * @example\n *\n * const double = x => x * 2\n *\n * mapAll(double, [1, 2, 3]) //=> [2, 4, 6]\n *\n * mapAll(double, {x: 1, y: 2, z: 3}) //=> {x: 2, y: 4, z: 6}\n */\nconst mapAll = curry(\n  defn('mapAll', (iteratee, collection) =>\n    pipe(\n      reduce(\n        (accum, value, kdx) => {\n          accum[kdx] = iteratee(value, kdx)\n          return accum\n        },\n        isArrayLike(collection) ? [] : {}\n      ),\n      all\n    )(collection)\n  )\n)\n\nexport default mapAll\n"],"file":"mapAll.js"}