{"version":3,"sources":["../../src/data/slice.js"],"names":["slice","start","end","arrayLike"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,MAAMA,KAAK,GAAG,oBAAM,mBAAK,OAAL,EAAc,CAACC,KAAD,EAAQC,GAAR,EAAaC,SAAb,KAA2B,6BAAeA,SAAf,EAA0BF,KAA1B,EAAiCC,GAAjC,CAAzC,CAAN,CAAd;eAEeF,K","sourcesContent":["import arrayLikeSlice from '../lang/arrayLikeSlice'\nimport curry from '../common/curry'\nimport defn from '../common/defn'\n\n/**\n * Creates a slice of `arrayLike` from `start` up to, but not including, `end`.\n *\n * **Note:** This method is used instead of\n * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are returned.\n *\n * This method\n *\n * @function\n * @since v0.0.3\n * @category data\n * @param {number} [start=0] The start position. A negative index will be treated as an offset from the end.\n * @param {number} [end=array.length] The end position. A negative index will be treated as an offset from the end.\n * @param {Array|string} arrayLike The array like value to slice.\n * @returns {Array|string} Returns the slice of `arrayLike`.\n * @example\n *\n * const array = [1, 2, 3, 4]\n *\n * slice(2, Infinity, array)\n * // => [3, 4]\n *\n * const string = 'abcd'\n *\n * slice(0, 2, string)\n * // => 'ab'\n */\nconst slice = curry(defn('slice', (start, end, arrayLike) => arrayLikeSlice(arrayLike, start, end)))\n\nexport default slice\n"],"file":"slice.js"}