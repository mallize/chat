{"version":3,"sources":["../../src/data/indexOfAtIndex.js"],"names":["baseIndexOfAtIndex","value","index","list","inf","item","length","indexOf","indexOfAtIndex"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,kBAAkB,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,KAAwB;AACjD,MAAIC,GAAJ;AACA,MAAIC,IAAJ;AAFiD,QAGzCC,MAHyC,GAG9BH,IAH8B,CAGzCG,MAHyC,EAIjD;;AACA,MAAI,yBAAWH,IAAI,CAACI,OAAhB,CAAJ,EAA8B;AAC5B,YAAQ,qBAAON,KAAP,CAAR;AACE,WAAK,QAAL;AACE,YAAIA,KAAK,KAAK,CAAd,EAAiB;AACf;AACAG,UAAAA,GAAG,GAAG,IAAIH,KAAV;;AACA,iBAAOC,KAAK,GAAGI,MAAf,EAAuB;AACrBD,YAAAA,IAAI,GAAGF,IAAI,CAACD,KAAD,CAAX;;AACA,gBAAIG,IAAI,KAAK,CAAT,IAAc,IAAIA,IAAJ,KAAaD,GAA/B,EAAoC;AAClC,qBAAOF,KAAP;AACD;;AACDA,YAAAA,KAAK,IAAI,CAAT;AACD;;AACD,iBAAO,CAAC,CAAR;AACD,SAXD,MAWO,IAAI,oBAAMD,KAAN,CAAJ,EAAkB;AACvB,iBAAOC,KAAK,GAAGC,IAAI,CAACG,MAApB,EAA4B;AAC1BD,YAAAA,IAAI,GAAGF,IAAI,CAACD,KAAD,CAAX;;AACA,gBAAI,oBAAMG,IAAN,CAAJ,EAAiB;AACf,qBAAOH,KAAP;AACD;;AACDA,YAAAA,KAAK,IAAI,CAAT;AACD;;AACD,iBAAO,CAAC,CAAR;AACD,SArBH,CAsBE;;;AACA,eAAOC,IAAI,CAACI,OAAL,CAAaN,KAAb,EAAoBC,KAApB,CAAP;AAEF;;AACA,WAAK,QAAL;AACA,WAAK,SAAL;AACA,WAAK,UAAL;AACA,WAAK,WAAL;AACE,eAAOC,IAAI,CAACI,OAAL,CAAaN,KAAb,EAAoBC,KAApB,CAAP;;AAEF,WAAK,MAAL;AACE;AACA,eAAOC,IAAI,CAACI,OAAL,CAAaN,KAAb,EAAoBC,KAApB,CAAP;AAnCJ;AAqCD,GA3CgD,CA4CjD;;;AACA,SAAOA,KAAK,GAAGI,MAAf,EAAuB;AACrB,QAAI,qBAAOH,IAAI,CAACD,KAAD,CAAX,EAAoBD,KAApB,CAAJ,EAAgC;AAC9B,aAAOC,KAAP;AACD;;AACDA,IAAAA,KAAK,IAAI,CAAT;AACD;;AACD,SAAO,CAAC,CAAR;AACD,CApDD;AAsDA;;;;;;;;;;;;;;;;;;;;AAiBA,MAAMM,cAAc,GAAG,oBAAM,mBAAK,gBAAL,EAAuBR,kBAAvB,CAAN,CAAvB;eAEeQ,c","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport equals from './equals'\nimport isFunction from '../lang/isFunction'\nimport isNaN from '../lang/isNaN'\nimport toType from '../lang/toType'\n\nconst baseIndexOfAtIndex = (value, index, list) => {\n  let inf\n  let item\n  const { length } = list\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (isFunction(list.indexOf)) {\n    switch (toType(value)) {\n      case 'Number':\n        if (value === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / value\n          while (index < length) {\n            item = list[index]\n            if (item === 0 && 1 / item === inf) {\n              return index\n            }\n            index += 1\n          }\n          return -1\n        } else if (isNaN(value)) {\n          while (index < list.length) {\n            item = list[index]\n            if (isNaN(item)) {\n              return index\n            }\n            index += 1\n          }\n          return -1\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(value, index)\n\n      // all these types can utilise Set\n      case 'String':\n      case 'Boolean':\n      case 'Function':\n      case 'Undefined':\n        return list.indexOf(value, index)\n\n      case 'Null':\n        // null can utilise Set\n        return list.indexOf(value, index)\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (index < length) {\n    if (equals(list[index], value)) {\n      return index\n    }\n    index += 1\n  }\n  return -1\n}\n\n/**\n * Returns the position of the first occurrence of an item in an array, or -1 if the item is not included in the array. [`equals`](#equals) is used to determine equality.\n *\n * This method automatically upgrades to async if any of the parameters are a Promise\n *\n * @function\n * @since v0.0.18\n * @category data\n * @param {*} value The value to find.\n * @param {Array} list The list to search in.\n * @param {number} index The index to start at.\n * @return {Number} the index of the value, or -1 if the value is not found.\n * @example\n *\n * indexOfAtIndex(3, 0, [1,2,3,4]) //=> 2\n * indexOfAtIndex(3, 3, [1,2,3,4]) //=> -1\n */\nconst indexOfAtIndex = curry(defn('indexOfAtIndex', baseIndexOfAtIndex))\n\nexport default indexOfAtIndex\n\nexport { baseIndexOfAtIndex }\n"],"file":"indexOfAtIndex.js"}