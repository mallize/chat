{"version":3,"sources":["../../src/data/concat.js"],"names":["concat","firstList","secondList","TypeError"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,MAAMA,MAAM,GAAG,oBACb,mBAAK,QAAL,EAAe,CAACC,SAAD,EAAYC,UAAZ,KAA2B;AACxC;AACA,MAAI,sBAAQD,SAAR,CAAJ,EAAwB;AACtB,QAAI,sBAAQC,UAAR,CAAJ,EAAyB;AACvB,aAAOD,SAAS,CAACD,MAAV,CAAiBE,UAAjB,CAAP;AACD;;AACD,UAAM,IAAIC,SAAJ,CAAe,GAAE,uBAASD,UAAT,CAAqB,kBAAtC,CAAN;AACD;;AACD,MAAI,uBAASD,SAAT,CAAJ,EAAyB;AACvB,QAAI,uBAASC,UAAT,CAAJ,EAA0B;AACxB,aAAOD,SAAS,GAAGC,UAAnB;AACD;;AACD,UAAM,IAAIC,SAAJ,CAAe,GAAE,uBAASD,UAAT,CAAqB,kBAAtC,CAAN;AACD;;AACD,MAAID,SAAS,IAAI,IAAb,IAAqB,yBAAWA,SAAS,CAACD,MAArB,CAAzB,EAAuD;AACrD,WAAOC,SAAS,CAACD,MAAV,CAAiBE,UAAjB,CAAP;AACD;;AACD,QAAM,IAAIC,SAAJ,CAAe,GAAE,uBAASF,SAAT,CAAoB,wCAArC,CAAN;AACD,CAlBD,CADa,CAAf;eAsBeD,M","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport isArray from '../lang/isArray'\nimport isFunction from '../lang/isFunction'\nimport isString from '../lang/isString'\nimport toString from '../lang/toString'\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `concat` expects both arguments to be of the same type, unlike the native `Array.prototype.concat` method. It will throw an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n *\n * Supports Promises. If a Promise is received for either parameter than the entire method will upgrade to async and return a Promise.\n *\n * @function\n * @since v0.0.6\n * @category data\n * @param {Array|string|Promise} firstList The first list\n * @param {Array|string|Promise} secondList The second list\n * @returns {Array|string} A list consisting of the elements of `firstList` followed by the elements of `secondList`.\n *\n * @example\n *\n * concat('ABC', 'DEF') // 'ABCDEF'\n * concat([4, 5, 6], [1, 2, 3]) //=> [4, 5, 6, 1, 2, 3]\n * concat([], []) //=> []\n * await concat(Promise.resolve([4, 5, 6]), Promise.resolve([1, 2, 3])) //=> [4, 5, 6, 1, 2, 3]\n */\nconst concat = curry(\n  defn('concat', (firstList, secondList) => {\n    // TODO BRN: Add support for concatenating more than one list\n    if (isArray(firstList)) {\n      if (isArray(secondList)) {\n        return firstList.concat(secondList)\n      }\n      throw new TypeError(`${toString(secondList)} is not an array`)\n    }\n    if (isString(firstList)) {\n      if (isString(secondList)) {\n        return firstList + secondList\n      }\n      throw new TypeError(`${toString(secondList)} is not a string`)\n    }\n    if (firstList != null && isFunction(firstList.concat)) {\n      return firstList.concat(secondList)\n    }\n    throw new TypeError(`${toString(firstList)} does not have a method named \"concat\"`)\n  })\n)\n\nexport default concat\n"],"file":"concat.js"}