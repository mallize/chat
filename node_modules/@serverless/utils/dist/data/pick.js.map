{"version":3,"sources":["../../src/data/pick.js"],"names":["pick","names","object","result","idx","length","name"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAMA,IAAI,GAAG,oBACX,mBAAK,MAAL,EAAa,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,GAAG,GAAG,CAAV;;AACA,SAAOA,GAAG,GAAGH,KAAK,CAACI,MAAnB,EAA2B;AACzB,UAAMC,IAAI,GAAGL,KAAK,CAACG,GAAD,CAAlB;;AACA,QAAIE,IAAI,IAAIJ,MAAZ,EAAoB;AAClBC,MAAAA,MAAM,CAACG,IAAD,CAAN,GAAeJ,MAAM,CAACI,IAAD,CAArB;AACD;;AACDF,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOD,MAAP;AACD,CAXD,CADW,CAAb;eAeeH,I","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\n\n/**\n * Returns a partial copy of an object containing only the keys specified. If\n * the key does not exist, the property is ignored.\n *\n * Supports Promises. If a Promise is received for either parameter than the entire method will upgrade to async and return a Promise.\n *\n * @function\n * @since v0.0.6\n * @category data\n * @param {Array|Promise<Array>} names an array of String property names to copy onto a new object\n * @param {Object|Promise<Object>} object The object to copy from\n * @returns {Object|Promise<Object>} A new object with only properties from `names` on it.\n * @example\n *\n * pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}) //=> {a: 1, d: 4}\n * pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}) //=> {a: 1}\n * await pick(\n *   Promise.resolve(['a', 'd']),\n *   Promise.resolve({a: 1, b: 2, c: 3, d: 4})\n * ) //=> {a: 1, d: 4}\n */\nconst pick = curry(\n  defn('pick', (names, object) => {\n    const result = {}\n    let idx = 0\n    while (idx < names.length) {\n      const name = names[idx]\n      if (name in object) {\n        result[name] = object[name]\n      }\n      idx += 1\n    }\n    return result\n  })\n)\n\nexport default pick\n"],"file":"pick.js"}