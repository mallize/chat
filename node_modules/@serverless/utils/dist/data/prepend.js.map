{"version":3,"sources":["../../src/data/prepend.js"],"names":["basePrepend","value","arrayLike","dispatchablePrepend","prepend","resolvedArrayLike"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,WAAW,GAAG,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACxC,MAAI,uBAASA,SAAT,CAAJ,EAAyB;AACvB,WAAO,qBAAOD,KAAP,EAAcC,SAAd,CAAP;AACD;;AACD,SAAO,qBAAO,CAACD,KAAD,CAAP,EAAgBC,SAAhB,CAAP;AACD,CALD;;;AAOA,MAAMC,mBAAmB,GAAG,2BAAa,SAAb,EAAwBH,WAAxB,CAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMI,OAAO,GAAG,oBAAM,CAACH,KAAD,EAAQC,SAAR,KACpB,0BAAaG,iBAAD,IAAuBF,mBAAmB,CAACF,KAAD,EAAQI,iBAAR,CAAtD,EAAkFH,SAAlF,CADc,CAAhB;eAIeE,O","sourcesContent":["import concat from './concat'\nimport curry from '../common/curry'\nimport dispatchable from '../common/dispatchable'\nimport isString from '../lang/isString'\nimport resolveWith from '../common/resolveWith'\n\nconst basePrepend = (value, arrayLike) => {\n  if (isString(arrayLike)) {\n    return concat(value, arrayLike)\n  }\n  return concat([value], arrayLike)\n}\n\nconst dispatchablePrepend = dispatchable('prepend', basePrepend)\n\n/**\n * Returns a new list with the given element at the front, followed by the contents of the list.\n *\n * This method dispatches to the `prepend` method of the `arrayLike` argument if it exists.\n *\n * This method will auto upgrade to async and resolve the `arrayLike` value if the `arrayLike` value is a Promise.\n *\n * @function\n * @since v0.0.13\n * @category data\n * @param {*} value The value to add to the end of the new list.\n * @param {Array|string} arrayLike The array like value of elements to prepend a new item to.\n * @return {Array|string} A new array or string containing the elements of the old list prepended with `value`.\n * @example\n *\n * prepend('write', ['more', 'tests']) //=> ['write', 'more', 'tests']\n * prepend('write', []) //=> ['write']\n * prepend(['write'], ['more', 'tests']) //=> ['write', 'more', ['tests']]\n * prepend('write', ' more tests') //=> 'write more tests'\n */\nconst prepend = curry((value, arrayLike) =>\n  resolveWith((resolvedArrayLike) => dispatchablePrepend(value, resolvedArrayLike), arrayLike)\n)\n\nexport default prepend\n\nexport { basePrepend, dispatchablePrepend }\n"],"file":"prepend.js"}