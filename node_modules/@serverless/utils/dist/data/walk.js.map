{"version":3,"sources":["../../src/data/walk.js"],"names":["walk","walkee","iteratee","args","walker","pass"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,MAAMA,IAAI,GAAG,qBACX,CADW,EAEX,mBAAK,MAAL,EAAa,CAACC,MAAD,EAASC,QAAT,EAAmB,GAAGC,IAAtB,KAA+B;AAC1C,QAAMC,MAAM,GAAG,CAAC,GAAGC,IAAJ,KAAaJ,MAAM,CAAC,GAAGI,IAAJ,EAAUD,MAAV,CAAlC;;AACA,SAAOH,MAAM,CAAC,GAAGE,IAAJ,EAAUD,QAAV,EAAoBE,MAApB,CAAb;AACD,CAHD,CAFW,CAAb;eAQeJ,I","sourcesContent":["import curryN from '../common/curryN'\nimport defn from '../common/defn'\n\n/**\n * Walk using the given walkee and iteratee functions.\n *\n * @function\n * @since v0.0.4\n * @category data\n * @sig\n * @param {Function} walkee The function responsible for returning the next value in the walk\n * @param {Function} iteratee The iterator function.\n * @returns {*} The final value returned by the walk\n * @example\n *\n * const depthFirstWalkee = (value, iteratee, recur) => {\n *   if (isObject(value)) {\n *     forEachObjIndexed((child) => {\n *       recur(child, iteratee)\n *     }, value)\n *   }\n *   iteratee(value, data)\n * }\n * let result = []\n * walk(\n *   depthFirstWalkee,\n *   (value) => result.push(value),\n *   {\n *     a: {\n *       b: 'b'\n *     }\n *   }\n * )\n * console.log(result)\n * //=> [\n *   'b',\n *   { b: 'b' },\n *   { a: { b: 'b' } }\n * ]\n */\nconst walk = curryN(\n  3,\n  defn('walk', (walkee, iteratee, ...args) => {\n    const walker = (...pass) => walkee(...pass, walker)\n    return walkee(...args, iteratee, walker)\n  })\n)\n\nexport default walk\n"],"file":"walk.js"}