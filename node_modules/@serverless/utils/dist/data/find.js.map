{"version":3,"sources":["../../src/data/find.js"],"names":["find","fn","collection","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,MAAMA,IAAI,GAAG,oBACX,mBAAK,MAAL,EAAa,CAACC,EAAD,EAAKC,UAAL,KAAoB;AAC/B,MAAI,0BAAYA,UAAZ,CAAJ,EAA6B;AAC3B,WAAO,0BAAYD,EAAZ,EAAgB,CAAhB,EAAmBC,UAAnB,CAAP;AACD;;AACD,SAAO,mBACL,0BAAaC,GAAD,IAASF,EAAE,CAACC,UAAU,CAACC,GAAD,CAAX,EAAkBA,GAAlB,CAAvB,EAA+C,CAA/C,CADK,EAEJA,GAAD,IAASD,UAAU,CAACC,GAAD,CAFd,EAGL,mBAAKD,UAAL,CAHK,CAAP;AAID,CARD,CADW,CAAb;eAYeF,I","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport findAtIndex from './findAtIndex'\nimport isArrayLike from '../lang/isArrayLike'\nimport keys from './keys'\nimport pipe from '../common/pipe'\n\n/**\n * Returns the first element of the collection which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Dispatches to the `find` method of the collection argument, if present.\n *\n * Supports async predicates. If a predicate returns a Promise than the entire\n * method will upgrade to async and return a Promise.\n *\n * @function\n * @since v0.0.3\n * @category data\n * @sig (a, b -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {*} collection The collection to consider.\n * @returns {Object} The element found, or `undefined`.\n * @example\n *\n * const xs = [{a: 1}, {a: 2}, {a: 3}];\n * find(propEq('a', 2))(xs); //=> {a: 2}\n * find(propEq('a', 4))(xs); //=> undefined\n */\nconst find = curry(\n  defn('find', (fn, collection) => {\n    if (isArrayLike(collection)) {\n      return findAtIndex(fn, 0, collection)\n    }\n    return pipe(\n      findAtIndex((key) => fn(collection[key], key), 0),\n      (key) => collection[key]\n    )(keys(collection))\n  })\n)\n\nexport default find\n"],"file":"find.js"}