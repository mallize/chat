{"version":3,"sources":["../../src/data/append.js"],"names":["baseAppend","value","arrayLike","dispatchableAppend","append","resolvedArrayLike"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,UAAU,GAAG,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACvC,MAAI,uBAASA,SAAT,CAAJ,EAAyB;AACvB,WAAO,qBAAOA,SAAP,EAAkBD,KAAlB,CAAP;AACD;;AACD,SAAO,qBAAOC,SAAP,EAAkB,CAACD,KAAD,CAAlB,CAAP;AACD,CALD;;;AAOA,MAAME,kBAAkB,GAAG,2BAAa,QAAb,EAAuBH,UAAvB,CAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMI,MAAM,GAAG,oBAAM,CAACH,KAAD,EAAQC,SAAR,KACnB,0BAAaG,iBAAD,IAAuBF,kBAAkB,CAACF,KAAD,EAAQI,iBAAR,CAArD,EAAiFH,SAAjF,CADa,CAAf;eAIeE,M","sourcesContent":["import concat from './concat'\nimport curry from '../common/curry'\nimport dispatchable from '../common/dispatchable'\nimport isString from '../lang/isString'\nimport resolveWith from '../common/resolveWith'\n\nconst baseAppend = (value, arrayLike) => {\n  if (isString(arrayLike)) {\n    return concat(arrayLike, value)\n  }\n  return concat(arrayLike, [value])\n}\n\nconst dispatchableAppend = dispatchable('append', baseAppend)\n\n/**\n * Returns a new list containing the contents of the given list, followed by the given value.\n *\n * This method dispatches to the `append` method of the `arrayLike` argument if it exists.\n *\n * This method will auto upgrade to async and resolve the `arrayLike` value if the `arrayLike` value is a Promise.\n *\n * @function\n * @since v0.0.3\n * @category data\n * @param {*} value The value to add to the end of the new list.\n * @param {Array|string} arrayLike The array like value of elements to add a new item to.\n * @return {Array|string} A new array or string containing the elements of the old list followed by `value`.\n * @example\n *\n * append('tests', ['write', 'more']) //=> ['write', 'more', 'tests']\n * append('tests', []) //=> ['tests']\n * append(['tests'], ['write', 'more']) //=> ['write', 'more', ['tests']]\n * append('tests', 'write more ') //=> 'write more tests'\n */\nconst append = curry((value, arrayLike) =>\n  resolveWith((resolvedArrayLike) => dispatchableAppend(value, resolvedArrayLike), arrayLike)\n)\n\nexport default append\n\nexport { baseAppend, dispatchableAppend }\n"],"file":"append.js"}