{"version":3,"sources":["../../src/data/map.js"],"names":["map","iteratee","collection","accum","value","kdx","result"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,MAAMA,GAAG,GAAG,oBACV,mBAAK,KAAL,EAAY,CAACC,QAAD,EAAWC,UAAX,KACV,qBACE,CAACC,KAAD,EAAQC,KAAR,EAAeC,GAAf,KACE,mBACE,MAAMJ,QAAQ,CAACG,KAAD,EAAQC,GAAR,CADhB,EAEGC,MAAD,IAAY;AACVH,EAAAA,KAAK,CAACE,GAAD,CAAL,GAAaC,MAAb;AACA,SAAOH,KAAP;AACD,CALH,GAFJ,EASE,0BAAYD,UAAZ,IAA0B,EAA1B,GAA+B,EATjC,EAUEA,UAVF,CADF,CADU,CAAZ;eAiBeF,G","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport isArrayLike from '../lang/isArrayLike'\nimport pipe from '../common/pipe'\nimport reduce from './reduce'\n\n/**\n * Takes a function and a [functor](https://github.com/fantasyland/fantasy-land#functor), applies the function to each of the functor's values, and returns  a functor of the same shape.\n *\n * Provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * This method automatically upgrades to async.\n * - If the `iteratee` or the `collection` arguments are Promises, this method will resolve those values before executing and this method will return a `Promise`.\n * - If the `iteratee` returns a `Promise`, this method will reutrn a `Promise`\n *\n * This method executes in **series**. If the iteratee returns a Promise, it will wait till the Promise resolves before it executes the next iteration.\n *\n * @function\n * @since v0.0.13\n * @category data\n * @param {Function} iteratee The function to be called on every element of the input `list`.\n * @param {*} collection The collection to be iterated over.\n * @return {*} The new collection.\n * @example\n *\n * const double = x => x * 2\n *\n * map(double, [1, 2, 3]) //=> [2, 4, 6]\n *\n * map(double, {x: 1, y: 2, z: 3}) //=> {x: 2, y: 4, z: 6}\n */\nconst map = curry(\n  defn('map', (iteratee, collection) =>\n    reduce(\n      (accum, value, kdx) =>\n        pipe(\n          () => iteratee(value, kdx),\n          (result) => {\n            accum[kdx] = result\n            return accum\n          }\n        )(),\n      isArrayLike(collection) ? [] : {},\n      collection\n    )\n  )\n)\n\nexport default map\n"],"file":"map.js"}