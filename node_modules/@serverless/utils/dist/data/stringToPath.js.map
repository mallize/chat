{"version":3,"sources":["../../src/data/stringToPath.js"],"names":["charCodeOfDot","charCodeAt","reEscapeChar","rePropName","RegExp","stringToPath","string","result","push","replace","match","expression","quote","subString","key","trim"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,aAAa,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAtB;AACA,MAAMC,YAAY,GAAG,UAArB;AACA,MAAMC,UAAU,GAAGC,MAAM,EACvB;AACA,cACE,GADF,GAEE;AACA,QAHF,GAIE;AACA,YALF,GAME,GANF,GAOE;AACA,wCARF,GASE,MATF,GAUE,GAVF,GAWE;AACA,oCAdqB,EAevB,GAfuB,CAAzB;AAkBA,MAAMC,YAAY,GAAG,oBACnB,sBAASC,MAAD,IAAY;AAClB,QAAMC,MAAM,GAAG,EAAf;;AACA,MAAID,MAAM,CAACL,UAAP,CAAkB,CAAlB,MAAyBD,aAA7B,EAA4C;AAC1CO,IAAAA,MAAM,CAACC,IAAP,CAAY,EAAZ;AACD;;AACDF,EAAAA,MAAM,CAACG,OAAP,CAAeN,UAAf,EAA2B,CAACO,KAAD,EAAQC,UAAR,EAAoBC,KAApB,EAA2BC,SAA3B,KAAyC;AAClE,QAAIC,GAAG,GAAGJ,KAAV;;AACA,QAAIE,KAAJ,EAAW;AACTE,MAAAA,GAAG,GAAGD,SAAS,CAACJ,OAAV,CAAkBP,YAAlB,EAAgC,IAAhC,CAAN;AACD,KAFD,MAEO,IAAIS,UAAJ,EAAgB;AACrBG,MAAAA,GAAG,GAAGH,UAAU,CAACI,IAAX,EAAN;AACD;;AACDR,IAAAA,MAAM,CAACC,IAAP,CAAYM,GAAZ;AACD,GARD;AASA,SAAOP,MAAP;AACD,CAfD,CADmB,CAArB;eAmBeF,Y","sourcesContent":["import curry from '../common/curry'\nimport memoize from '../common/memoize'\n\nconst charCodeOfDot = '.'.charCodeAt(0)\nconst reEscapeChar = /\\\\(\\\\)?/g\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  '[^.[\\\\]]+' +\n    '|' +\n    // Or match property names within brackets.\n    '\\\\[(?:' +\n    // Match a non-string expression.\n    '([^\"\\'].*)' +\n    '|' +\n    // Or match strings (supports escaping characters).\n    '([\"\\'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2' +\n    ')\\\\]' +\n    '|' +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    '(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))',\n  'g'\n)\n\nconst stringToPath = curry(\n  memoize((string) => {\n    const result = []\n    if (string.charCodeAt(0) === charCodeOfDot) {\n      result.push('')\n    }\n    string.replace(rePropName, (match, expression, quote, subString) => {\n      let key = match\n      if (quote) {\n        key = subString.replace(reEscapeChar, '$1')\n      } else if (expression) {\n        key = expression.trim()\n      }\n      result.push(key)\n    })\n    return result\n  })\n)\n\nexport default stringToPath\n"],"file":"stringToPath.js"}