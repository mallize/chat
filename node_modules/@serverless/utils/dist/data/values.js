"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _curry = _interopRequireDefault(require("../common/curry"));

var _getProp = _interopRequireDefault(require("./getProp"));

var _isArray = _interopRequireDefault(require("../lang/isArray"));

var _isFunction = _interopRequireDefault(require("../lang/isFunction"));

var _isMap = _interopRequireDefault(require("../lang/isMap"));

var _keys = _interopRequireDefault(require("./keys"));

var _resolveWith = _interopRequireDefault(require("../common/resolveWith"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns an array of all the values of the given collection.
 *
 * Note that the order of the output array is not guaranteed across different JS platforms.
 *
 * Supports objects, Maps and array like values.
 *
 * This method supports Promise values. If given a Promise it will return a Promise that will resolve to the values of the resolved value of the Promise.
 *
 * Dispatches to the `values` method of the `collection` if present (except on `Map`). If a `Map` is received an array of the `Map`'s keys will be returned.
 *
 * @function
 * @since v0.0.12
 * @category data
 * @param {*} collection The collection to extract values from
 * @returns {Array<*>|Promise<Array<*>>} An array of the values of the `collection`
 * @example
 *
 * values({a: 1, b: 2, c: 3}) //=> [1, 2, 3]
 * values({}) //=> []
 *
 * values(['fi', 'fo', 'fum']) //=> [ 'fi', 'fo', 'fum' ]
 * values([]) //=> []
 *
 * values('abc') //=> ['a', 'b', 'c']
 * values('') //=> []
 *
 * await values(Promise.resolve({ a: 1, b: 2 }) //=> [1, 2]
 */
const values = (0, _curry.default)((0, _resolveWith.default)(collection => {
  if ((0, _isMap.default)(collection)) {
    return Array.from(collection.values());
  }

  if (collection != null && !(0, _isArray.default)(collection) && (0, _isFunction.default)(collection.values)) {
    return collection.values();
  }

  const props = (0, _keys.default)(collection);
  const length = props.length;
  const vals = [];
  let idx = 0;

  while (idx < length) {
    vals[idx] = (0, _getProp.default)(props[idx], collection);
    idx += 1;
  }

  return vals;
}));
var _default = values;
exports.default = _default;
//# sourceMappingURL=values.js.map