{"version":3,"sources":["../../src/data/remove.js"],"names":["remove","predicate","filterable"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;AAEA;;;;;;;;;;;;;;;;;AAiBA,MAAMA,MAAM,GAAG,oBACb,mBAAK,QAAL,EAAe,CAACC,SAAD,EAAYC,UAAZ,KAA2B,qBAAO,yBAAWD,SAAX,CAAP,EAA8BC,UAA9B,CAA1C,CADa,CAAf;eAIeF,M","sourcesContent":["import complement from '../common/complement'\nimport curry from '../common/curry'\nimport defn from '../common/defn'\nimport filter from './filter'\n\n// TODO BRN: Improve this method to maintain the original array in memory when no changes are made\n\n/**\n * The complement of [`filter`](#filter).\n *\n * @function\n * @since v0.0.16\n * @category data\n * @param {Function} predicate\n * @param {*} filterable\n * @returns {*}\n * @example\n *\n * isOdd = (n) => n % 2 === 1\n *\n * remove(isOdd, [1, 2, 3, 4]) //=> [2, 4]\n *\n * remove(isOdd, {a: 1, b: 2, c: 3, d: 4}) //=> {b: 2, d: 4}\n */\nconst remove = curry(\n  defn('remove', (predicate, filterable) => filter(complement(predicate), filterable))\n)\n\nexport default remove\n"],"file":"remove.js"}