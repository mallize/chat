"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _curry = _interopRequireDefault(require("../common/curry"));

var _defn = _interopRequireDefault(require("../common/defn"));

var _iterate = _interopRequireDefault(require("../common/iterate"));

var _pipe = _interopRequireDefault(require("../common/pipe"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Returns the kdx of the first element of the collection which matches the predicate, or `undefined` if no element matches.
 *
 * Dispatches to the `findkdx` method of the `collection` argument, if present.
 *
 * Supports async predicates. If a predicate returns a Promise than the entire method will upgrade to async and return a Promise.
 *
 * @function
 * @since v0.0.15
 * @category data
 * @param {Function} fn The predicate function used to determine if the element is the desired one.
 * @param {Array} collection The collection to consider.
 * @returns {*|Promise} The key or index found, or `undefined`.
 * @example
 *
 * findKdx(
 *   (value, index) => value[index] == 2,
 *   [{a: 1}, {a: 2}, {a: 3}]
 * )
 * //=> 1
 *
 * findKdx(
 *   (value, key) => value[key] == 2,
 *   { a: 1, b: 2, c: 3 }
 * )
 * //=> 'b'
 */
const findKdx = (0, _curry.default)((0, _defn.default)('findKdx', (fn, collection) => (0, _iterate.default)(next => (0, _pipe.default)(pNext => {
  if (pNext.done) {
    return pNext;
  }

  return fn(pNext.value, pNext.kdx);
}, result => {
  if (result) {
    return _objectSpread({}, next, {
      value: next.kdx,
      done: true
    });
  }

  return next;
})(next), collection)));
var _default = findKdx;
exports.default = _default;
//# sourceMappingURL=findKdx.js.map