{"version":3,"sources":["../../src/data/getParentPath.js"],"names":["getParentPath","path","value","pathParts","undefined"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;AAeA,MAAMA,aAAa,GAAG,oBACpB,mBAAK,eAAL,EAAsB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACrC,QAAMC,SAAS,GAAG,sBAAQF,IAAR,CAAlB;;AACA,MAAI,sBAAQE,SAAR,CAAJ,EAAwB;AACtB,WAAOC,SAAP;AACD;;AACD,SAAO,sBAAQ,mBAAKD,SAAL,CAAR,EAAyBD,KAAzB,CAAP;AACD,CAND,CADoB,CAAtB;eAUeF,a","sourcesContent":["import compact from './compact'\nimport curry from '../common/curry'\nimport defn from '../common/defn'\nimport getPath from './getPath'\nimport init from './init'\nimport isEmpty from '../logic/isEmpty'\n\n/**\n * Retrieve the parent value from a given path. The parent value is the value immediately before the last path part.\n *\n *\n * @function\n * @since v0.0.10\n * @category data\n * @param {Array} path The path to use.\n * @param {*} value The value to retrieve the nested property from.\n * @returns {*} The data at `path`.\n * @example\n *\n * getParentPath(['a', 'b'], {a: {b: 2}}); //=> {b: 2}\n * getParentPath(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\nconst getParentPath = curry(\n  defn('getParentPath', (path, value) => {\n    const pathParts = compact(path)\n    if (isEmpty(pathParts)) {\n      return undefined\n    }\n    return getPath(init(pathParts), value)\n  })\n)\n\nexport default getParentPath\n"],"file":"getParentPath.js"}