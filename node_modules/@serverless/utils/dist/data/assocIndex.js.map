{"version":3,"sources":["../../src/data/assocIndex.js"],"names":["baseAssocIndex","index","val","arr","result","dispatchableAssocIndex","assocIndex","value","array","resolvedIndex","resolvedArray"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,cAAc,GAAG,CAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb,KAAqB;AAC1C,MAAI,0BAAYF,KAAZ,CAAJ,EAAwB;AACtB,WAAOC,GAAP;AACD;;AACD,MAAI,yBAAWD,KAAX,CAAJ,EAAuB;AACrB,WAAO,mBAAKA,KAAL,EAAY,qBAAOC,GAAP,CAAZ,EAAyBC,GAAzB,CAAP;AACD;;AACD,QAAMC,MAAM,GAAG,CAAC,GAAGD,GAAJ,CAAf;AACAC,EAAAA,MAAM,CAACH,KAAD,CAAN,GAAgBC,GAAhB;AACA,SAAOE,MAAP;AACD,CAVD;;;AAYA,MAAMC,sBAAsB,GAAG,2BAAa,YAAb,EAA2BL,cAA3B,CAA/B;AAEA;;;;;;;;;;;;;;;;;AAeA,MAAMM,UAAU,GAAG,oBAAM,CAACL,KAAD,EAAQM,KAAR,EAAeC,KAAf,KACvB,sBACE,CAAC,CAACC,aAAD,EAAgBC,aAAhB,CAAD,KAAoCL,sBAAsB,CAACI,aAAD,EAAgBF,KAAhB,EAAuBG,aAAvB,CAD5D,EAEE,CAACT,KAAD,EAAQO,KAAR,CAFF,CADiB,CAAnB;eAOeF,U","sourcesContent":["import allWith from '../common/allWith'\nimport always from './always'\nimport curry from '../common/curry'\nimport dispatchable from '../common/dispatchable'\nimport isFunction from '../lang/isFunction'\nimport isUndefined from '../lang/isUndefined'\nimport over from './over'\n\nconst baseAssocIndex = (index, val, arr) => {\n  if (isUndefined(index)) {\n    return val\n  }\n  if (isFunction(index)) {\n    return over(index, always(val), arr)\n  }\n  const result = [...arr]\n  result[index] = val\n  return result\n}\n\nconst dispatchableAssocIndex = dispatchable('assocIndex', baseAssocIndex)\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @function\n * @since v0.0.3\n * @category data\n * @param {number} index The index number to set\n * @param {*} value The new value\n * @param {Array} array The array to clone\n * @returns {Array} A new array equivalent to the original except for the changed index.\n * @example\n *\n * assocIndex(1, 'c', ['a', 'b']) //=> ['a', 'c']\n */\nconst assocIndex = curry((index, value, array) =>\n  allWith(\n    ([resolvedIndex, resolvedArray]) => dispatchableAssocIndex(resolvedIndex, value, resolvedArray),\n    [index, array]\n  )\n)\n\nexport default assocIndex\n\nexport { baseAssocIndex, dispatchableAssocIndex }\n"],"file":"assocIndex.js"}