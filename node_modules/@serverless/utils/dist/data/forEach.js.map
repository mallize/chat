{"version":3,"sources":["../../src/data/forEach.js"],"names":["forEach","fn","collection","next","pNext","done","value","kdx"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,MAAMA,OAAO,GAAG,oBACd,mBAAK,SAAL,EAAgB,CAACC,EAAD,EAAKC,UAAL,KACd,mBACE,MACE,sBACGC,IAAD,IACE,mBACGC,KAAD,IAAW;AACT,MAAIA,KAAK,CAACC,IAAV,EAAgB;AACd,WAAOD,KAAP;AACD;;AACD,SAAOH,EAAE,CAACG,KAAK,CAACE,KAAP,EAAcF,KAAK,CAACG,GAApB,EAAyBL,UAAzB,CAAT;AACD,CANH,EAOE,MAAMC,IAPR,EAQEA,IARF,CAFJ,EAWED,UAXF,CAFJ,EAeE,MAAMA,UAfR,GADF,CADc,CAAhB;eAsBeF,O","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport iterate from '../common/iterate'\nimport pipe from '../common/pipe'\n\n/**\n * Iterate over a collection calling a provided function `fn` for each element in the collection .\n *\n * `fn` receives two arguments: *(value, kdx)*\n *\n * Note: `forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, this `forEach` returns\n * the original value. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * This method automatically upgrades to async.\n * - If the `iteratee` or the `collection` arguments are Promises, this method will resolve those values before executing and this method will return a `Promise`.\n * - If the `iteratee` returns a `Promise`, this method will reutrn a `Promise`\n *\n * This method executes in **series**. If the iteratee returns a `Promise`, it will wait till the `Promise` resolves before it executes the next iteration.\n *\n * @function\n * @since v0.0.3\n * @category data\n * @param {Function} fn The function to invoke. Receives two arguments, `value` and either `index` for arrays or `key` for objects.\n * @param {*} collection The collection to iterate over.\n * @returns {*} The original collection.\n * @example\n *\n * const printXPlusFive = x => console.log(x + 5);\n * forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n * // logs 6\n * // logs 7\n * // logs 8\n */\nconst forEach = curry(\n  defn('forEach', (fn, collection) =>\n    pipe(\n      () =>\n        iterate(\n          (next) =>\n            pipe(\n              (pNext) => {\n                if (pNext.done) {\n                  return pNext\n                }\n                return fn(pNext.value, pNext.kdx, collection)\n              },\n              () => next\n            )(next),\n          collection\n        ),\n      () => collection\n    )()\n  )\n)\n\nexport default forEach\n"],"file":"forEach.js"}