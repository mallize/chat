{"version":3,"sources":["../../src/data/assign.js"],"names":["assign","target","sources","Object"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAMA,MAAM,GAAG,qBAAO,CAAP,EAAU,CAACC,MAAD,EAAS,GAAGC,OAAZ,KAAwB;AAC/C,MAAI,CAAC,CAACD,MAAF,IAAY,yBAAWA,MAAM,CAACD,MAAlB,CAAhB,EAA2C;AACzC,WAAOC,MAAM,CAACD,MAAP,CAAc,GAAGE,OAAjB,CAAP;AACD;;AACD,SAAOC,MAAM,CAACH,MAAP,CAAcC,MAAd,EAAsB,GAAGC,OAAzB,CAAP;AACD,CALc,CAAf;eAOeF,M","sourcesContent":["import curryN from '../common/curryN'\nimport isFunction from '../lang/isFunction'\n\n/**\n * The assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.\n *\n * Dispatches to the `assign` method of the first parameter if it exists.\n *\n * This method is auto curried to 2 args.\n *\n * @function\n * @since v0.0.9\n * @category data\n * @param {Object} target The target object.\n * @param {...Object} sources The source object(s).\n * @returns {Object} The target object\n * @example\n *\n * const  o1 = { a: 1, b: 1, c: 1 }\n * const o2 = { b: 2, c: 2 }\n * const o3 = { c: 3 }\n *\n * assign({}, o1, o2, o3)  //=> { a: 1, b: 2, c: 3 }\n */\nconst assign = curryN(2, (target, ...sources) => {\n  if (!!target && isFunction(target.assign)) {\n    return target.assign(...sources)\n  }\n  return Object.assign(target, ...sources)\n})\n\nexport default assign\n"],"file":"assign.js"}