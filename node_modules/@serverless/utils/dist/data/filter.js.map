{"version":3,"sources":["../../src/data/filter.js"],"names":["filter","fn","collection","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMA,MAAM,GAAG,oBACb,mBAAK,QAAL,EAAe,CAACC,EAAD,EAAKC,UAAL,KAAoB;AACjC,MAAI,uBAASA,UAAT,CAAJ,EAA0B;AACxB,WAAO,mBAAK,EAAL,EAAS,4BAAcD,EAAd,EAAkB,CAAlB,EAAqBC,UAArB,CAAT,CAAP;AACD;;AACD,MAAI,0BAAYA,UAAZ,CAAJ,EAA6B;AAC3B,WAAO,4BAAcD,EAAd,EAAkB,CAAlB,EAAqBC,UAArB,CAAP;AACD;;AACD,SAAO,mBAAK,4BAAeC,GAAD,IAASF,EAAE,CAACC,UAAU,CAACC,GAAD,CAAX,EAAkBA,GAAlB,CAAzB,EAAiD,CAAjD,EAAoD,mBAAKD,UAAL,CAApD,CAAL,EAA4EA,UAA5E,CAAP;AACD,CARD,CADa,CAAf;eAYeF,M","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport filterAtIndex from './filterAtIndex'\nimport isArrayLike from '../lang/isArrayLike'\nimport isString from '../lang/isString'\nimport join from './join'\nimport keys from './keys'\nimport pick from './pick'\n\n// TODO BRN: Improve this method to maintain the original array in memory when no changes are made\n\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the same type containing the members of the given filterable which satisfy the given predicate. Filterable objects include plain objects or any object that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Supports async predicates. If a predicate returns a Promise than the entire method will upgrade to async and return a Promise.\n *\n * @function\n * @since v0.0.6\n * @category data\n * @param {Function} fn The predicate function.\n * @param {*} collection The collection to consider.\n * @returns {*} The filtered collection\n * @example\n *\n * const isEven = n => n % 2 === 0;\n *\n * filter(isEven, [1, 2, 3, 4]) //=> [2, 4]\n * filter(isEven, {a: 1, b: 2, c: 3, d: 4}) //=> {b: 2, d: 4}\n *\n * await filter(async (value) => isEven(value), [1, 2, 3, 4]) //=> [2, 4]\n */\nconst filter = curry(\n  defn('filter', (fn, collection) => {\n    if (isString(collection)) {\n      return join('', filterAtIndex(fn, 0, collection))\n    }\n    if (isArrayLike(collection)) {\n      return filterAtIndex(fn, 0, collection)\n    }\n    return pick(filterAtIndex((key) => fn(collection[key], key), 0, keys(collection)), collection)\n  })\n)\n\nexport default filter\n"],"file":"filter.js"}