{"version":3,"sources":["../../src/data/forEachAll.js"],"names":["forEachAll","iteratee","collection","accum","value","kdx","push","all"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,MAAMA,UAAU,GAAG,oBACjB,mBAAK,YAAL,EAAmB,CAACC,QAAD,EAAWC,UAAX,KACjB,mBACE,qBAAO,CAACC,KAAD,EAAQC,KAAR,EAAeC,GAAf,KAAuB;AAC5BF,EAAAA,KAAK,CAACG,IAAN,CAAWL,QAAQ,CAACG,KAAD,EAAQC,GAAR,CAAnB;AACA,SAAOF,KAAP;AACD,CAHD,EAGG,EAHH,CADF,EAKEI,YALF,EAME,MAAML,UANR,EAOEA,UAPF,CADF,CADiB,CAAnB;eAaeF,U","sourcesContent":["import all from '../common/all'\nimport curry from '../common/curry'\nimport defn from '../common/defn'\nimport pipe from '../common/pipe'\nimport reduce from './reduce'\n\n/**\n * Iterate over a collection calling a provided function `iteratee` for each element in the collection.\n *\n * `iteratee` receives two arguments: *(value, kdx)*\n *\n * Note: `forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, this `forEach` returns\n * the original value. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * This method automatically upgrades to async.\n * - If the `iteratee` or the `collection` arguments are Promises, this method will resolve those values before executing and this method will return a `Promise`.\n * - If the `iteratee` returns a `Promise`, this method will reutrn a `Promise`\n *\n * This method executes in **parallel**. If the iteratee returns a `Promise`, it will NOT wait till the `Promise` resolves before it executes the next iteration.\n *\n * @function\n * @since v0.0.19\n * @category data\n * @param {Function} iteratee The function to invoke. Receives two arguments, `value` and either `index` for arrays or `key` for objects.\n * @param {*} collection The collection to iterate over.\n * @returns {*} The original collection.\n * @example\n *\n * const printXPlusFive = x => console.log(x + 5);\n * forEachAll(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n * // logs 6\n * // logs 7\n * // logs 8\n */\nconst forEachAll = curry(\n  defn('forEachAll', (iteratee, collection) =>\n    pipe(\n      reduce((accum, value, kdx) => {\n        accum.push(iteratee(value, kdx))\n        return accum\n      }, []),\n      all,\n      () => collection\n    )(collection)\n  )\n)\n\nexport default forEachAll\n"],"file":"forEachAll.js"}