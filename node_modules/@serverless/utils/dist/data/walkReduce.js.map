{"version":3,"sources":["../../src/data/walkReduce.js"],"names":["reduceWalkee","visited","Set","accum","value","keys","iteratee","recur","result","resolvedValue","has","add","accumResult","child","childKdx","newKeys","walkReduce","collection"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,YAAY,GAAG,MAAM;AACzB,QAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;AACA,SAAO,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAqBC,QAArB,EAA+BC,KAA/B,KAAyC;AAC9C,WAAO,mBACJC,MAAD,IAAYF,QAAQ,CAACE,MAAD,EAASJ,KAAT,EAAgBC,IAAhB,CADf,EAEJG,MAAD,IAAY;AACV,YAAMC,aAAa,GAAG,sBAAQL,KAAR,CAAtB;;AACA,UAAI,2BAAaK,aAAb,KAA+B,CAACR,OAAO,CAACS,GAAR,CAAYD,aAAZ,CAApC,EAAgE;AAC9DR,QAAAA,OAAO,CAACU,GAAR,CAAYF,aAAZ;AACA,eAAO,qBACL,CAACG,WAAD,EAAcC,KAAd,EAAqBC,QAArB,KAAkC;AAChC,gBAAMC,OAAO,GAAG,qBAAOV,IAAP,EAAa,CAACS,QAAD,CAAb,CAAhB;AACA,iBAAOP,KAAK,CAACK,WAAD,EAAcC,KAAd,EAAqBE,OAArB,EAA8BT,QAA9B,CAAZ;AACD,SAJI,EAKLE,MALK,EAMLC,aANK,CAAP;AAQD;;AACD,aAAOD,MAAP;AACD,KAhBI,EAiBLL,KAjBK,CAAP;AAkBD,GAnBD;AAoBD,CAtBD;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,MAAMa,UAAU,GAAG,oBAAM,CAACV,QAAD,EAAWH,KAAX,EAAkBc,UAAlB,KACvB,mBAAKjB,YAAY,EAAjB,EAAqBM,QAArB,EAA+BH,KAA/B,EAAsCc,UAAtC,EAAkD,EAAlD,CADiB,CAAnB;eAIeD,U","sourcesContent":["import concat from './concat'\nimport curry from '../common/curry'\nimport isObjectLike from '../lang/isObjectLike'\nimport pipe from '../common/pipe'\nimport reduce from './reduce'\nimport resolve from '../common/resolve'\nimport walk from './walk'\n\nconst reduceWalkee = () => {\n  const visited = new Set()\n  return (accum, value, keys, iteratee, recur) => {\n    return pipe(\n      (result) => iteratee(result, value, keys),\n      (result) => {\n        const resolvedValue = resolve(value)\n        if (isObjectLike(resolvedValue) && !visited.has(resolvedValue)) {\n          visited.add(resolvedValue)\n          return reduce(\n            (accumResult, child, childKdx) => {\n              const newKeys = concat(keys, [childKdx])\n              return recur(accumResult, child, newKeys, iteratee)\n            },\n            result,\n            resolvedValue\n          )\n        }\n        return result\n      }\n    )(accum)\n  }\n}\n\n/**\n * Walk reduce using the given reducer function\n *\n * NOTE: This method will resolve values during the walk before iterating and walking them.\n *\n * @function\n * @since v0.0.4\n * @category data\n * @param {Function} fn The iterator function. Receives three values, the accumulator and the current element from the walk and the current set of keys from the entire depth of the walk.\n * @param {*} accum The accumulator value.\n * @param {*} collection The collection to walk.\n * @returns {*} The final, accumulated value.\n * @example\n *\n * walkReduce(\n *   (accum, value, keys) => {\n *     if (!isObject(value)) {\n *       return accum + toString(value)\n *     }\n *     return accum\n *   },\n *   '',\n *   {\n *     a: {\n *       b: 'b',\n *       c: {\n *         d: 'd'\n *       }\n *     },\n *     e: [ 'e', 'f' ]\n *   }\n * )\n * //=> 'bdef'\n */\nconst walkReduce = curry((iteratee, accum, collection) =>\n  walk(reduceWalkee(), iteratee, accum, collection, [])\n)\n\nexport default walkReduce\n"],"file":"walkReduce.js"}