{"version":3,"sources":["../../src/data/get.js"],"names":["get","selector","value","parts"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,MAAMA,GAAG,GAAG,oBACV,mBAAK,KAAL,EAAY,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC/B,MAAI,0BAAYD,QAAZ,CAAJ,EAA2B;AACzB,WAAOC,KAAP;AACD;;AACD,MAAI,yBAAWD,QAAX,CAAJ,EAA0B;AACxB,WAAOA,QAAQ,CAACC,KAAD,CAAf;AACD;;AACD,MAAIC,KAAK,GAAGF,QAAZ;;AACA,MAAI,CAAC,sBAAQA,QAAR,CAAL,EAAwB;AACtBE,IAAAA,KAAK,GAAG,uBAASF,QAAT,EAAmBC,KAAnB,CAAR;AACD;;AACD,SAAO,sBAAQC,KAAR,EAAeD,KAAf,CAAP;AACD,CAZD,CADU,CAAZ;eAgBeF,G","sourcesContent":["import castPath from './castPath'\nimport curry from '../common/curry'\nimport defn from '../common/defn'\nimport getPath from './getPath'\nimport isArray from '../lang/isArray'\nimport isFunction from '../lang/isFunction'\nimport isUndefined from '../lang/isUndefined'\n\n/**\n * Retrieve the value at a given path.\n *\n * Paths can be defined by a string an array. The path parameter also accepts a function that will be used as a selector against the data.\n *\n *\n *\n * @function\n * @since v0.0.3\n * @category data\n * @param {Array|string|number|Function} path The path to use.\n * @param {Object} value The value to retrieve the nested property from.\n * @returns {*} The data at `path`.\n * @example\n *\n * get(['a', 'b'], {a: {b: 2}})\n * //=> 2\n *\n * get(['a', 'b'], {c: {b: 2}})\n * //=> undefined\n *\n * get('a', {a: {b: 2}})\n * //=> { b: 2 }\n *\n * get('a.b', {a: {b: 2}})\n * //=> 2\n *\n * get('a[0]', {a: [ 1, 2 ]})\n * //=> 1\n *\n * get('[0]', [ 1, 2 ])\n * //=> 1\n */\nconst get = curry(\n  defn('get', (selector, value) => {\n    if (isUndefined(selector)) {\n      return value\n    }\n    if (isFunction(selector)) {\n      return selector(value)\n    }\n    let parts = selector\n    if (!isArray(selector)) {\n      parts = castPath(selector, value)\n    }\n    return getPath(parts, value)\n  })\n)\n\nexport default get\n"],"file":"get.js"}