"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchableAssoc = exports.baseAssoc = exports.default = void 0;

var _allWith = _interopRequireDefault(require("../common/allWith"));

var _always = _interopRequireDefault(require("./always"));

var _assocPath = _interopRequireDefault(require("./assocPath"));

var _castPath = _interopRequireDefault(require("./castPath"));

var _curry = _interopRequireDefault(require("../common/curry"));

var _dispatchable = _interopRequireDefault(require("../common/dispatchable"));

var _isArray = _interopRequireDefault(require("../lang/isArray"));

var _isFunction = _interopRequireDefault(require("../lang/isFunction"));

var _isUndefined = _interopRequireDefault(require("../lang/isUndefined"));

var _over = _interopRequireDefault(require("./over"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const baseAssoc = (selector, value, collection) => {
  if ((0, _isUndefined.default)(selector)) {
    return value;
  }

  if ((0, _isFunction.default)(selector)) {
    return (0, _over.default)(selector, (0, _always.default)(value), collection);
  }

  let parts = selector;

  if (!(0, _isArray.default)(selector)) {
    parts = (0, _castPath.default)(selector, collection);
  }

  return (0, _assocPath.default)(parts, value, collection);
};

exports.baseAssoc = baseAssoc;
const dispatchableAssoc = (0, _dispatchable.default)('assoc', baseAssoc);
/**
 * Makes a shallow clone of an object, setting or overriding the specified property with the given value. Note that this copies and flattens prototype properties onto the new object as well. All non-primitive properties are copied by reference.
 *
 * Supports path based property selectors 'foo.bar' and functional selectors which performs an over on the entire collection and sets each matching selector to the given value.
 *
 * @function
 * @since v0.0.3
 * @category data
 * @sig String -> a -> {k: v} -> {k: v}
 * @param {Array | String | Function} selector The property path to set or functional selector
 * @param {*} value The new value
 * @param {*} collection The collection to clone and assign the new value
 * @returns {*} A new collection equivalent to the original except for the changed selector path.
 * @example
 *
 * assoc('c', 3, {a: 1, b: 2})          //=> {a: 1, b: 2, c: 3}
 * assoc('c.d', 3, {a: 1, b: 2})        //=> {a: 1, b: 2, c: { d: 3 }}
 * assoc([ 'c', 'd' ], 3, {a: 1, b: 2}) //=> {a: 1, b: 2, c: { d: 3 }}
 */

exports.dispatchableAssoc = dispatchableAssoc;
const assoc = (0, _curry.default)((selector, value, collection) => (0, _allWith.default)(([resolvedSelector, resolvedCollection]) => dispatchableAssoc(resolvedSelector, value, resolvedCollection), [selector, collection]));
var _default = assoc;
exports.default = _default;
//# sourceMappingURL=assoc.js.map