{"version":3,"sources":["../../src/data/tail.js"],"names":["baseTail","Infinity","tail"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,QAAQ,GAAG,oBAAM,CAAN,EAASC,QAAT,CAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,MAAMC,IAAI,GAAG,oBAAM,mBAAK,MAAL,EAAaF,QAAb,CAAN,CAAb;eAEeE,I","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport slice from './slice'\n\nconst baseTail = slice(1, Infinity)\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @function\n * @since v0.0.5\n * @category data\n * @sig [a] -> [a]\n * @param {*} collection The collection to get the tail of\n * @returns {*} The tail of the given collection\n * @example\n *\n * tail([1, 2, 3]);  //=> [2, 3]\n * tail([1, 2]);     //=> [2]\n * tail([1]);        //=> []\n * tail([]);         //=> []\n *\n * tail('abc');  //=> 'bc'\n * tail('ab');   //=> 'b'\n * tail('a');    //=> ''\n * tail('');     //=> ''\n */\nconst tail = curry(defn('tail', baseTail))\n\nexport default tail\n\nexport { baseTail }\n"],"file":"tail.js"}