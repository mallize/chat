{"version":3,"sources":["../../src/data/contains.js"],"names":["contains","value","collection","equals"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;AAgBA,MAAMA,QAAQ,GAAG,oBACf,mBAAK,UAAL,EAAiB,CAACC,KAAD,EAAQC,UAAR,KAAuB,oCAAiBC,eAAjB,EAAyBF,KAAzB,EAAgCC,UAAhC,CAAxC,CADe,CAAjB;eAIeF,Q","sourcesContent":["import { baseContainsWith } from './containsWith'\nimport curry from '../common/curry'\nimport defn from '../common/defn'\nimport equals from './equals'\n\n/**\n * Returns `true` if the specified value is equal, in [`equals`](#equals) terms, to at least one value of the given collection; `false` otherwise.\n *\n * @function\n * @since v0.0.18\n * @category data\n * @param {*} value The value to compare against.\n * @param {array|object|string} collection The collection to consider.\n * @returns {boolean} `true` if an equivalent value is in the collection, `false` otherwise.\n * @example\n *\n * contains(3, [1, 2, 3]) //=> true\n * contains(4, [1, 2, 3]) //=> false\n * contains({ name: 'Fred' }, [{ name: 'Fred' }]) //=> true\n * contains([42], [[42]]) //=> true\n */\nconst contains = curry(\n  defn('contains', (value, collection) => baseContainsWith(equals, value, collection))\n)\n\nexport default contains\n"],"file":"contains.js"}