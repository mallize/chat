{"version":3,"sources":["../../src/data/any.js"],"names":["any","fn","collection","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,MAAMA,GAAG,GAAG,oBACV,mBAAK,KAAL,EAAY,CAACC,EAAD,EAAKC,UAAL,KAAoB;AAC9B,MAAI,0BAAYA,UAAZ,CAAJ,EAA6B;AAC3B,WAAO,yBAAWD,EAAX,EAAe,CAAf,EAAkBC,UAAlB,CAAP;AACD;;AACD,SAAO,yBAAYC,GAAD,IAASF,EAAE,CAACC,UAAU,CAACC,GAAD,CAAX,EAAkBA,GAAlB,CAAtB,EAA8C,CAA9C,EAAiD,mBAAKD,UAAL,CAAjD,CAAP;AACD,CALD,CADU,CAAZ;eASeF,G","sourcesContent":["import anyAtIndex from './anyAtIndex'\nimport curry from '../common/curry'\nimport defn from '../common/defn'\nimport isArrayLike from '../lang/isArrayLike'\nimport keys from './keys'\n\n/**\n * Returns `true` if at least one of elements of the collection match the predicate, `false` otherwise.\n *\n * Dispatches to the `any` method of the collection argument, if present.\n *\n * Supports async predicates. If a predicate returns a Promise than the entire method will upgrade to async and return a Promise.\n *\n * @function\n * @since v0.0.3\n * @category data\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {*} collection The collection to consider.\n * @returns {Boolean} `true` if the predicate is satisfied by at least one element, `false` otherwise.\n * @example\n *\n * const lessThan0 = flip(lt)(0)\n * const lessThan2 = flip(lt)(2)\n * any(lessThan0)([1, 2]) //=> false\n * any(lessThan2)([1, 2]) //=> true\n * any(lessThan2)({ a: 1, b: 2 }) //=> true\n *\n * await any(async (value) => lessThan2(value), [1, 2]) //=> true\n */\nconst any = curry(\n  defn('any', (fn, collection) => {\n    if (isArrayLike(collection)) {\n      return anyAtIndex(fn, 0, collection)\n    }\n    return anyAtIndex((key) => fn(collection[key], key), 0, keys(collection))\n  })\n)\n\nexport default any\n"],"file":"any.js"}