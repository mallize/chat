{"version":3,"sources":["../../src/data/walkReduceDepthFirst.js"],"names":["reduceWalkee","visited","Set","accum","value","keys","iteratee","recur","resolvedValue","result","has","add","accumResult","child","childKdx","newKeys","walkReduceDepthFirst","collection"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,YAAY,GAAG,MAAM;AACzB,QAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;AACA,SAAO,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAqBC,QAArB,EAA+BC,KAA/B,KAAyC;AAC9C,UAAMC,aAAa,GAAG,sBAAQJ,KAAR,CAAtB;AACA,WAAO,mBACJK,MAAD,IAAY;AACV,UAAI,2BAAaD,aAAb,KAA+B,CAACP,OAAO,CAACS,GAAR,CAAYF,aAAZ,CAApC,EAAgE;AAC9DP,QAAAA,OAAO,CAACU,GAAR,CAAYH,aAAZ;AACA,eAAO,qBACL,CAACI,WAAD,EAAcC,KAAd,EAAqBC,QAArB,KAAkC;AAChC,gBAAMC,OAAO,GAAG,qBAAOV,IAAP,EAAa,CAACS,QAAD,CAAb,CAAhB;AACA,iBAAOP,KAAK,CAACK,WAAD,EAAcC,KAAd,EAAqBE,OAArB,EAA8BT,QAA9B,CAAZ;AACD,SAJI,EAKLG,MALK,EAMLD,aANK,CAAP;AAQD;;AACD,aAAOC,MAAP;AACD,KAdI,EAeJA,MAAD,IAAYH,QAAQ,CAACG,MAAD,EAASL,KAAT,EAAgBC,IAAhB,CAff,EAgBLF,KAhBK,CAAP;AAiBD,GAnBD;AAoBD,CAtBD;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,MAAMa,oBAAoB,GAAG,oBAAM,CAACV,QAAD,EAAWH,KAAX,EAAkBc,UAAlB,KACjC,mBAAKjB,YAAY,EAAjB,EAAqBM,QAArB,EAA+BH,KAA/B,EAAsCc,UAAtC,EAAkD,EAAlD,CAD2B,CAA7B;eAIeD,oB","sourcesContent":["import concat from './concat'\nimport curry from '../common/curry'\nimport isObjectLike from '../lang/isObjectLike'\nimport pipe from '../common/pipe'\nimport reduce from './reduce'\nimport resolve from '../common/resolve'\nimport walk from './walk'\n\nconst reduceWalkee = () => {\n  const visited = new Set()\n  return (accum, value, keys, iteratee, recur) => {\n    const resolvedValue = resolve(value)\n    return pipe(\n      (result) => {\n        if (isObjectLike(resolvedValue) && !visited.has(resolvedValue)) {\n          visited.add(resolvedValue)\n          return reduce(\n            (accumResult, child, childKdx) => {\n              const newKeys = concat(keys, [childKdx])\n              return recur(accumResult, child, newKeys, iteratee)\n            },\n            result,\n            resolvedValue\n          )\n        }\n        return result\n      },\n      (result) => iteratee(result, value, keys)\n    )(accum)\n  }\n}\n\n/**\n * Walk depth first and reduce using the given reducer function\n *\n * NOTE: This method will resolve values during the walk before iterating and walking them.\n *\n * @function\n * @since v0.0.4\n * @category data\n * @param {Function} iteratee The iterator function. Receives three values, the accumulator and the current element from the walk and the current set of keys from the entire depth of the walk.\n * @param {*} accum The accumulator value.\n * @param {*} collection The collection to walk.\n * @returns {*} The final, accumulated value.\n * @example\n *\n * walkReduceDepthFirst(\n *   (accum, value, keys) => {\n *     accum.push(keys)\n *     return accum\n *   },\n *   [],\n *   {\n *     a: {\n *       b: {\n *         c: 'c'\n *       },\n *       d: 'd',\n *     },\n *     e: [ 'e', 'f' ]\n *   }\n * )\n * //=> [\n *   [ 'a', 'b', 'c' ],\n *   [ 'a', 'b' ],\n *   [ 'a', 'd' ],\n *   [ 'a' ],\n *   [ 'e', 0 ],\n *   [ 'e', 1 ],\n *   [ 'e' ],\n *   []\n * ]\n */\nconst walkReduceDepthFirst = curry((iteratee, accum, collection) =>\n  walk(reduceWalkee(), iteratee, accum, collection, [])\n)\n\nexport default walkReduceDepthFirst\n"],"file":"walkReduceDepthFirst.js"}