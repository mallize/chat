"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _concat = _interopRequireDefault(require("./concat"));

var _curry = _interopRequireDefault(require("../common/curry"));

var _isObjectLike = _interopRequireDefault(require("../lang/isObjectLike"));

var _pipe = _interopRequireDefault(require("../common/pipe"));

var _reduce = _interopRequireDefault(require("./reduce"));

var _resolve = _interopRequireDefault(require("../common/resolve"));

var _walk = _interopRequireDefault(require("./walk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const reduceWalkee = () => {
  const visited = new Set();
  return (accum, value, keys, iteratee, recur) => {
    return (0, _pipe.default)(result => iteratee(result, value, keys), result => {
      const resolvedValue = (0, _resolve.default)(value);

      if ((0, _isObjectLike.default)(resolvedValue) && !visited.has(resolvedValue)) {
        visited.add(resolvedValue);
        return (0, _reduce.default)((accumResult, child, childKdx) => {
          const newKeys = (0, _concat.default)(keys, [childKdx]);
          return recur(accumResult, child, newKeys, iteratee);
        }, result, resolvedValue);
      }

      return result;
    })(accum);
  };
};
/**
 * Walk reduce using the given reducer function
 *
 * NOTE: This method will resolve values during the walk before iterating and walking them.
 *
 * @function
 * @since v0.0.4
 * @category data
 * @param {Function} fn The iterator function. Receives three values, the accumulator and the current element from the walk and the current set of keys from the entire depth of the walk.
 * @param {*} accum The accumulator value.
 * @param {*} collection The collection to walk.
 * @returns {*} The final, accumulated value.
 * @example
 *
 * walkReduce(
 *   (accum, value, keys) => {
 *     if (!isObject(value)) {
 *       return accum + toString(value)
 *     }
 *     return accum
 *   },
 *   '',
 *   {
 *     a: {
 *       b: 'b',
 *       c: {
 *         d: 'd'
 *       }
 *     },
 *     e: [ 'e', 'f' ]
 *   }
 * )
 * //=> 'bdef'
 */


const walkReduce = (0, _curry.default)((iteratee, accum, collection) => (0, _walk.default)(reduceWalkee(), iteratee, accum, collection, []));
var _default = walkReduce;
exports.default = _default;
//# sourceMappingURL=walkReduce.js.map