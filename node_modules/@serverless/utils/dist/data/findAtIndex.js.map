{"version":3,"sources":["../../src/data/findAtIndex.js"],"names":["findAtIndex","fn","index","list","length","idx","value","result","then","resolvedResult"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMA,WAAW,GAAG,oBAClB,mBAAK,aAAL,EAAoB,CAACC,EAAD,EAAKC,KAAL,EAAYC,IAAZ,KAAqB;AAAA,QAC/BC,MAD+B,GACpBD,IADoB,CAC/BC,MAD+B;AAEvC,MAAIC,GAAG,GAAGH,KAAK,IAAI,CAAnB,CAFuC,CAIvC;;AACA,SAAOG,GAAG,GAAGD,MAAb,EAAqB;AACnB,UAAME,KAAK,GAAGH,IAAI,CAACE,GAAD,CAAlB;AACA,UAAME,MAAM,GAAGN,EAAE,CAACE,IAAI,CAACE,GAAD,CAAL,EAAYA,GAAZ,CAAjB;;AACA,QAAI,wBAAUE,MAAV,CAAJ,EAAuB;AACrB,aAAOA,MAAM,CAACC,IAAP,CAAaC,cAAD,IAAoB;AACrC,YAAIA,cAAJ,EAAoB;AAClB,iBAAOH,KAAP;AACD;;AACD,eAAON,WAAW,CAACC,EAAD,EAAKI,GAAG,GAAG,CAAX,EAAcF,IAAd,CAAlB;AACD,OALM,CAAP;AAMD,KAPD,MAOO,IAAII,MAAJ,EAAY;AACjB,aAAOD,KAAP;AACD;;AACDD,IAAAA,GAAG,IAAI,CAAP;AACD;AACF,CApBD,CADkB,CAApB;eAwBeL,W","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport isPromise from '../lang/isPromise'\n\n/**\n * Returns the first element of the list which matches the predicate, or `undefined` if no element matches starting at the given index.\n *\n * Dispatches to the `findAtIndex` method of the last argument, if present.\n *\n * Supports async predicates. If a predicate returns a Promise than the entire method will upgrade to async and return a Promise.\n *\n * @function\n * @since v0.0.3\n * @category data\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Integer} index The index to start at.\n * @param {Array} list The array to consider.\n * @returns {*|Promise} The element found, or `undefined`.\n * @example\n *\n * const xs = [{a: 1}, {a: 2}, {a: 3}];\n * findAtIndex(propEq('a'), 0)(xs) //=> {a: 2}\n * findAtIndex(propEq('a', 2), 2)(xs) //=> undefined\n */\nconst findAtIndex = curry(\n  defn('findAtIndex', (fn, index, list) => {\n    const { length } = list\n    let idx = index || 0\n\n    // TODO BRN: abstract this while loop pattern and make it reusable\n    while (idx < length) {\n      const value = list[idx]\n      const result = fn(list[idx], idx)\n      if (isPromise(result)) {\n        return result.then((resolvedResult) => {\n          if (resolvedResult) {\n            return value\n          }\n          return findAtIndex(fn, idx + 1, list)\n        })\n      } else if (result) {\n        return value\n      }\n      idx += 1\n    }\n  })\n)\n\nexport default findAtIndex\n"],"file":"findAtIndex.js"}