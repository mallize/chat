"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _curry = _interopRequireDefault(require("../common/curry"));

var _defn = _interopRequireDefault(require("../common/defn"));

var _everyAtIndex = _interopRequireDefault(require("./everyAtIndex"));

var _isArrayLike = _interopRequireDefault(require("../lang/isArrayLike"));

var _keys = _interopRequireDefault(require("./keys"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if all elements of the list match the predicate, `false` if there are any that don't.
 *
 * Dispatches to the `every` method of the second argument, if present.
 *
 * Supports async predicates. If a predicate returns a Promise than the entire method will upgrade to async and return a Promise.
 *
 * @function
 * @since v0.0.6
 * @category data
 * @param {Function} fn The predicate function.
 * @param {*} collection The collection to consider.
 * @returns {boolean} `true` if the predicate is satisfied by every value, `false` otherwise.
 * @example
 *
 * const equals3 = equals(3)
 * every(equals3, [3, 3, 3, 3]) //=> true
 * every(equals3, [3, 3, 1, 3]) //=> false
 * every(equals3, { a: 3, b: 3, c: 3}) //=> true
 *
 * await every(async (value) => equals3(value), [3, 3, 3]) //=> true
 */
const every = (0, _curry.default)((0, _defn.default)('every', (fn, collection) => {
  if ((0, _isArrayLike.default)(collection)) {
    return (0, _everyAtIndex.default)(fn, 0, collection);
  }

  return (0, _everyAtIndex.default)(key => fn(collection[key], key), 0, (0, _keys.default)(collection));
}));
var _default = every;
exports.default = _default;
//# sourceMappingURL=every.js.map