{"version":3,"sources":["../../src/data/values.js"],"names":["values","collection","Array","from","props","length","vals","idx"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAMA,MAAM,GAAG,oBACb,0BAAaC,UAAD,IAAgB;AAC1B,MAAI,oBAAMA,UAAN,CAAJ,EAAuB;AACrB,WAAOC,KAAK,CAACC,IAAN,CAAWF,UAAU,CAACD,MAAX,EAAX,CAAP;AACD;;AACD,MAAIC,UAAU,IAAI,IAAd,IAAsB,CAAC,sBAAQA,UAAR,CAAvB,IAA8C,yBAAWA,UAAU,CAACD,MAAtB,CAAlD,EAAiF;AAC/E,WAAOC,UAAU,CAACD,MAAX,EAAP;AACD;;AACD,QAAMI,KAAK,GAAG,mBAAKH,UAAL,CAAd;AAP0B,QAQlBI,MARkB,GAQPD,KARO,CAQlBC,MARkB;AAS1B,QAAMC,IAAI,GAAG,EAAb;AACA,MAAIC,GAAG,GAAG,CAAV;;AACA,SAAOA,GAAG,GAAGF,MAAb,EAAqB;AACnBC,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,sBAAQH,KAAK,CAACG,GAAD,CAAb,EAAoBN,UAApB,CAAZ;AACAM,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOD,IAAP;AACD,CAhBD,CADa,CAAf;eAoBeN,M","sourcesContent":["import curry from '../common/curry'\nimport getProp from './getProp'\nimport isArray from '../lang/isArray'\nimport isFunction from '../lang/isFunction'\nimport isMap from '../lang/isMap'\nimport keys from './keys'\nimport resolveWith from '../common/resolveWith'\n\n/**\n * Returns an array of all the values of the given collection.\n *\n * Note that the order of the output array is not guaranteed across different JS platforms.\n *\n * Supports objects, Maps and array like values.\n *\n * This method supports Promise values. If given a Promise it will return a Promise that will resolve to the values of the resolved value of the Promise.\n *\n * Dispatches to the `values` method of the `collection` if present (except on `Map`). If a `Map` is received an array of the `Map`'s keys will be returned.\n *\n * @function\n * @since v0.0.12\n * @category data\n * @param {*} collection The collection to extract values from\n * @returns {Array<*>|Promise<Array<*>>} An array of the values of the `collection`\n * @example\n *\n * values({a: 1, b: 2, c: 3}) //=> [1, 2, 3]\n * values({}) //=> []\n *\n * values(['fi', 'fo', 'fum']) //=> [ 'fi', 'fo', 'fum' ]\n * values([]) //=> []\n *\n * values('abc') //=> ['a', 'b', 'c']\n * values('') //=> []\n *\n * await values(Promise.resolve({ a: 1, b: 2 }) //=> [1, 2]\n */\nconst values = curry(\n  resolveWith((collection) => {\n    if (isMap(collection)) {\n      return Array.from(collection.values())\n    }\n    if (collection != null && !isArray(collection) && isFunction(collection.values)) {\n      return collection.values()\n    }\n    const props = keys(collection)\n    const { length } = props\n    const vals = []\n    let idx = 0\n    while (idx < length) {\n      vals[idx] = getProp(props[idx], collection)\n      idx += 1\n    }\n    return vals\n  })\n)\n\nexport default values\n"],"file":"values.js"}