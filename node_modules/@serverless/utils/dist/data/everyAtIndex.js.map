{"version":3,"sources":["../../src/data/everyAtIndex.js"],"names":["everyAtIndex","fn","index","list","length","idx","result","then","resolvedResult"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAMA,YAAY,GAAG,oBACnB,mBAAK,cAAL,EAAqB,CAACC,EAAD,EAAKC,KAAL,EAAYC,IAAZ,KAAqB;AACxC,MAAI,CAAC,0BAAYA,IAAZ,CAAL,EAAwB;AACtB,UAAM,kCAAoB,WAApB,EAAiCA,IAAjC,CAAN;AACD;;AAHuC,QAIhCC,MAJgC,GAIrBD,IAJqB,CAIhCC,MAJgC;AAKxC,MAAIC,GAAG,GAAGH,KAAK,IAAI,CAAnB;;AACA,MAAIG,GAAG,GAAG,CAAV,EAAa;AACXA,IAAAA,GAAG,GAAGD,MAAM,GAAGC,GAAf;AACD;;AACD,MAAIA,GAAG,GAAG,CAAV,EAAa;AACXA,IAAAA,GAAG,GAAG,CAAN;AACD;;AAED,SAAOA,GAAG,GAAGD,MAAb,EAAqB;AACnB,UAAME,MAAM,GAAGL,EAAE,CAACE,IAAI,CAACE,GAAD,CAAL,EAAYA,GAAZ,CAAjB;;AACA,QAAI,wBAAUC,MAAV,CAAJ,EAAuB;AACrB,aAAOA,MAAM,CAACC,IAAP,CAAaC,cAAD,IAAoB;AACrC,YAAI,CAACA,cAAL,EAAqB;AACnB,iBAAO,KAAP;AACD;;AACD,eAAOR,YAAY,CAACC,EAAD,EAAKI,GAAG,GAAG,CAAX,EAAcF,IAAd,CAAnB;AACD,OALM,CAAP;AAMD,KAPD,MAOO,IAAI,CAACG,MAAL,EAAa;AAClB,aAAO,KAAP;AACD;;AACDD,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAO,IAAP;AACD,CA5BD,CADmB,CAArB;eAgCeL,Y","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport errorUnexpectedType from './errors/errorUnexpectedType'\nimport isArrayLike from '../lang/isArrayLike'\nimport isPromise from '../lang/isPromise'\n\n/**\n * Returns `true` if all elements of the list match the predicate starting at the given index, `false` otherwise.\n *\n * Dispatches to the `everyAtIndex` method of the list argument, if present.\n *\n * Supports async predicates. If a predicate returns a Promise than the entire method will upgrade to async and return a Promise.\n *\n * @function\n * @since v0.0.6\n * @category data\n * @param {Function} fn The predicate function.\n * @param {Integer} index The index to start at.\n * @param {Array} list The array to consider.\n * @returns {Boolean} `true` if the predicate is satisfied by at least one element, `false`  otherwise.\n * @example\n *\n * const lessThan0 = flip(lt)(0)\n * const lessThan2 = flip(lt)(2)\n * any(lessThan0)([1, 2]) //=> false\n * any(lessThan2)([1, 2]) //=> true\n */\nconst everyAtIndex = curry(\n  defn('everyAtIndex', (fn, index, list) => {\n    if (!isArrayLike(list)) {\n      throw errorUnexpectedType('ArrayLike', list)\n    }\n    const { length } = list\n    let idx = index || 0\n    if (idx < 0) {\n      idx = length + idx\n    }\n    if (idx < 0) {\n      idx = 0\n    }\n\n    while (idx < length) {\n      const result = fn(list[idx], idx)\n      if (isPromise(result)) {\n        return result.then((resolvedResult) => {\n          if (!resolvedResult) {\n            return false\n          }\n          return everyAtIndex(fn, idx + 1, list)\n        })\n      } else if (!result) {\n        return false\n      }\n      idx += 1\n    }\n    return true\n  })\n)\n\nexport default everyAtIndex\n"],"file":"everyAtIndex.js"}