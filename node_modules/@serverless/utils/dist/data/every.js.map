{"version":3,"sources":["../../src/data/every.js"],"names":["every","fn","collection","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMA,KAAK,GAAG,oBACZ,mBAAK,OAAL,EAAc,CAACC,EAAD,EAAKC,UAAL,KAAoB;AAChC,MAAI,0BAAYA,UAAZ,CAAJ,EAA6B;AAC3B,WAAO,2BAAaD,EAAb,EAAiB,CAAjB,EAAoBC,UAApB,CAAP;AACD;;AACD,SAAO,2BAAcC,GAAD,IAASF,EAAE,CAACC,UAAU,CAACC,GAAD,CAAX,EAAkBA,GAAlB,CAAxB,EAAgD,CAAhD,EAAmD,mBAAKD,UAAL,CAAnD,CAAP;AACD,CALD,CADY,CAAd;eASeF,K","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport everyAtIndex from './everyAtIndex'\nimport isArrayLike from '../lang/isArrayLike'\nimport keys from './keys'\n\n/**\n * Returns `true` if all elements of the list match the predicate, `false` if there are any that don't.\n *\n * Dispatches to the `every` method of the second argument, if present.\n *\n * Supports async predicates. If a predicate returns a Promise than the entire method will upgrade to async and return a Promise.\n *\n * @function\n * @since v0.0.6\n * @category data\n * @param {Function} fn The predicate function.\n * @param {*} collection The collection to consider.\n * @returns {boolean} `true` if the predicate is satisfied by every value, `false` otherwise.\n * @example\n *\n * const equals3 = equals(3)\n * every(equals3, [3, 3, 3, 3]) //=> true\n * every(equals3, [3, 3, 1, 3]) //=> false\n * every(equals3, { a: 3, b: 3, c: 3}) //=> true\n *\n * await every(async (value) => equals3(value), [3, 3, 3]) //=> true\n */\nconst every = curry(\n  defn('every', (fn, collection) => {\n    if (isArrayLike(collection)) {\n      return everyAtIndex(fn, 0, collection)\n    }\n    return everyAtIndex((key) => fn(collection[key], key), 0, keys(collection))\n  })\n)\n\nexport default every\n"],"file":"every.js"}