"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arrayLikeKeys = _interopRequireDefault(require("../lang/arrayLikeKeys"));

var _curry = _interopRequireDefault(require("../common/curry"));

var _isArrayLike = _interopRequireDefault(require("../lang/isArrayLike"));

var _isFunction = _interopRequireDefault(require("../lang/isFunction"));

var _isMap = _interopRequireDefault(require("../lang/isMap"));

var _reflectOwnKeys = _interopRequireDefault(require("../lang/reflectOwnKeys"));

var _resolveWith = _interopRequireDefault(require("../common/resolveWith"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the keys of the given collection in an Array.
 *
 * Supports objects, Maps and array like values. If given an array like value, the indexes will be returned in string form.
 *
 * This method supports Promise values. If given a Promise it will return a Promise that will resolve to the keys of the resolved value of the Promise.
 *
 * Dispatches to the `keys` method of the `collection` if present (except on Map). If a `Map` is received an array of the `Map`'s keys will be returned.
 *
 * @function
 * @since v0.0.3
 * @category data
 * @param {*} collection The collection to get the keys from
 * @returns {Array<string>|Promise<Array<string>>} The keys of the given collection
 * @example
 *
 * keys({ foo: 'bar', 'baz': 'bat', bim: 'bop' }) //=> ['foo', 'baz', 'bim']
 * keys({}) //=> []
 *
 * keys(['fi', 'fo', 'fum']) //=> [ '0', '1', '2' ]
 * keys([]) //=> []
 *
 * keys('abc') //=> ['0', '1', '2']
 * keys('') //=> []
 *
 * await keys(Promise.resolve({ a: 1, b: 2 }) //=> ['a', 'b']
 */
const keys = (0, _curry.default)((0, _resolveWith.default)(collection => {
  if ((0, _isArrayLike.default)(collection)) {
    return (0, _arrayLikeKeys.default)(collection);
  }

  if ((0, _isMap.default)(collection)) {
    return Array.from(collection.keys());
  }

  if (collection != null && (0, _isFunction.default)(collection.keys)) {
    return collection.keys();
  }

  return (0, _reflectOwnKeys.default)(collection);
}));
var _default = keys;
exports.default = _default;
//# sourceMappingURL=keys.js.map