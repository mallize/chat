{"version":3,"sources":["../../src/data/flatten.js"],"names":["flatten","arrayFlatten"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;AAeA,MAAMA,OAAO,GAAG,oBAAM,mBAAK,SAAL,EAAgBC,qBAAhB,CAAN,CAAhB;eAEeD,O","sourcesContent":["import arrayFlatten from '../lang/arrayFlatten'\nimport curry from '../common/curry'\nimport defn from '../common/defn'\n\n/**\n * Returns a new list by pulling every item out of it (and all its sub-arrays) and putting them in a new array, depth-first.\n *\n * This method automatically upgrades to async. If a Promise is given as the list this method will resolve the promise as the list and return a Promise that resolves to the flattened list.\n *\n * @function\n * @since v0.0.10\n * @category data\n * @param {Array|Promise<Array>} array The array to consider.\n * @returns {Array|Promise<Array>} The flattened array.\n * @example\n *\n * flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]])\n * //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nconst flatten = curry(defn('flatten', arrayFlatten))\n\nexport default flatten\n"],"file":"flatten.js"}