{"version":3,"sources":["../../src/data/keys.js"],"names":["keys","collection","Array","from"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,MAAMA,IAAI,GAAG,oBACX,0BAAaC,UAAD,IAAgB;AAC1B,MAAI,0BAAYA,UAAZ,CAAJ,EAA6B;AAC3B,WAAO,4BAAcA,UAAd,CAAP;AACD;;AAED,MAAI,oBAAMA,UAAN,CAAJ,EAAuB;AACrB,WAAOC,KAAK,CAACC,IAAN,CAAWF,UAAU,CAACD,IAAX,EAAX,CAAP;AACD;;AAED,MAAIC,UAAU,IAAI,IAAd,IAAsB,yBAAWA,UAAU,CAACD,IAAtB,CAA1B,EAAuD;AACrD,WAAOC,UAAU,CAACD,IAAX,EAAP;AACD;;AAED,SAAO,6BAAeC,UAAf,CAAP;AACD,CAdD,CADW,CAAb;eAkBeD,I","sourcesContent":["import arrayLikeKeys from '../lang/arrayLikeKeys'\nimport curry from '../common/curry'\nimport isArrayLike from '../lang/isArrayLike'\nimport isFunction from '../lang/isFunction'\nimport isMap from '../lang/isMap'\nimport reflectOwnKeys from '../lang/reflectOwnKeys'\nimport resolveWith from '../common/resolveWith'\n\n/**\n * Returns the keys of the given collection in an Array.\n *\n * Supports objects, Maps and array like values. If given an array like value, the indexes will be returned in string form.\n *\n * This method supports Promise values. If given a Promise it will return a Promise that will resolve to the keys of the resolved value of the Promise.\n *\n * Dispatches to the `keys` method of the `collection` if present (except on Map). If a `Map` is received an array of the `Map`'s keys will be returned.\n *\n * @function\n * @since v0.0.3\n * @category data\n * @param {*} collection The collection to get the keys from\n * @returns {Array<string>|Promise<Array<string>>} The keys of the given collection\n * @example\n *\n * keys({ foo: 'bar', 'baz': 'bat', bim: 'bop' }) //=> ['foo', 'baz', 'bim']\n * keys({}) //=> []\n *\n * keys(['fi', 'fo', 'fum']) //=> [ '0', '1', '2' ]\n * keys([]) //=> []\n *\n * keys('abc') //=> ['0', '1', '2']\n * keys('') //=> []\n *\n * await keys(Promise.resolve({ a: 1, b: 2 }) //=> ['a', 'b']\n */\nconst keys = curry(\n  resolveWith((collection) => {\n    if (isArrayLike(collection)) {\n      return arrayLikeKeys(collection)\n    }\n\n    if (isMap(collection)) {\n      return Array.from(collection.keys())\n    }\n\n    if (collection != null && isFunction(collection.keys)) {\n      return collection.keys()\n    }\n\n    return reflectOwnKeys(collection)\n  })\n)\n\nexport default keys\n"],"file":"keys.js"}