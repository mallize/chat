{"version":3,"sources":["../../src/data/assocProp.js"],"names":["baseAssocProp","prop","value","object","result","Map","entries","set","iterator","next","done","key","dispatchableAssocProp","assocProp","resolvedProp","resolvedObject"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,aAAa,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd,KAAyB;AAC7C,MAAI,0BAAYF,IAAZ,CAAJ,EAAuB;AACrB,WAAOC,KAAP;AACD;;AACD,MAAI,yBAAWD,IAAX,CAAJ,EAAsB;AACpB,WAAO,mBAAKA,IAAL,EAAW,qBAAOC,KAAP,CAAX,EAA0BC,MAA1B,CAAP;AACD;;AACD,MAAI,oBAAMA,MAAN,CAAJ,EAAmB;AACjB,UAAMC,MAAM,GAAG,IAAIC,GAAJ,CAAQF,MAAM,CAACG,OAAP,EAAR,CAAf;AACA,WAAOF,MAAM,CAACG,GAAP,CAAWN,IAAX,EAAiBC,KAAjB,CAAP;AACD;;AACD,QAAME,MAAM,GAAG,EAAf;AACA,QAAMI,QAAQ,GAAG,6BAAeL,MAAf,CAAjB;AACA,MAAIM,IAAI,GAAG;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAX;;AACA,SAAO,CAACD,IAAI,CAACC,IAAb,EAAmB;AACjBD,IAAAA,IAAI,GAAGD,QAAQ,CAACC,IAAT,EAAP;;AACA,QAAI,CAACA,IAAI,CAACC,IAAV,EAAgB;AACdN,MAAAA,MAAM,CAACK,IAAI,CAACE,GAAN,CAAN,GAAmBR,MAAM,CAACM,IAAI,CAACE,GAAN,CAAzB;AACD;AACF;;AACDP,EAAAA,MAAM,CAACH,IAAD,CAAN,GAAeC,KAAf;AACA,SAAOE,MAAP;AACD,CAtBD;;;AAwBA,MAAMQ,qBAAqB,GAAG,2BAAa,WAAb,EAA0BZ,aAA1B,CAA9B;AAEA;;;;;;;;;;;;;;;;;AAeA,MAAMa,SAAS,GAAG,oBAAM,CAACZ,IAAD,EAAOC,KAAP,EAAcC,MAAd,KACtB,sBACE,CAAC,CAACW,YAAD,EAAeC,cAAf,CAAD,KAAoCH,qBAAqB,CAACE,YAAD,EAAeZ,KAAf,EAAsBa,cAAtB,CAD3D,EAEE,CAACd,IAAD,EAAOE,MAAP,CAFF,CADgB,CAAlB;eAOeU,S","sourcesContent":["import allWith from '../common/allWith'\nimport always from './always'\nimport curry from '../common/curry'\nimport dispatchable from '../common/dispatchable'\nimport isFunction from '../lang/isFunction'\nimport isMap from '../lang/isMap'\nimport isUndefined from '../lang/isUndefined'\nimport objectIterator from '../lang/objectIterator'\nimport over from './over'\n\nconst baseAssocProp = (prop, value, object) => {\n  if (isUndefined(prop)) {\n    return value\n  }\n  if (isFunction(prop)) {\n    return over(prop, always(value), object)\n  }\n  if (isMap(object)) {\n    const result = new Map(object.entries())\n    return result.set(prop, value)\n  }\n  const result = {}\n  const iterator = objectIterator(object)\n  let next = { done: false }\n  while (!next.done) {\n    next = iterator.next()\n    if (!next.done) {\n      result[next.key] = object[next.key]\n    }\n  }\n  result[prop] = value\n  return result\n}\n\nconst dispatchableAssocProp = dispatchable('assocProp', baseAssocProp)\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @function\n * @since v0.0.3\n * @category data\n * @param {string} prop The property name to set\n * @param {*} value The new value\n * @param {Object|Map} object The object to clone\n * @returns {Object} A new object equivalent to the original except for the changed property.\n * @example\n *\n * assocProp('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nconst assocProp = curry((prop, value, object) =>\n  allWith(\n    ([resolvedProp, resolvedObject]) => dispatchableAssocProp(resolvedProp, value, resolvedObject),\n    [prop, object]\n  )\n)\n\nexport default assocProp\n\nexport { baseAssocProp, dispatchableAssocProp }\n"],"file":"assocProp.js"}