"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchableAssocIndex = exports.baseAssocIndex = exports.default = void 0;

var _allWith = _interopRequireDefault(require("../common/allWith"));

var _always = _interopRequireDefault(require("./always"));

var _curry = _interopRequireDefault(require("../common/curry"));

var _dispatchable = _interopRequireDefault(require("../common/dispatchable"));

var _isFunction = _interopRequireDefault(require("../lang/isFunction"));

var _isUndefined = _interopRequireDefault(require("../lang/isUndefined"));

var _over = _interopRequireDefault(require("./over"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const baseAssocIndex = (index, val, arr) => {
  if ((0, _isUndefined.default)(index)) {
    return val;
  }

  if ((0, _isFunction.default)(index)) {
    return (0, _over.default)(index, (0, _always.default)(val), arr);
  }

  const result = [...arr];
  result[index] = val;
  return result;
};

exports.baseAssocIndex = baseAssocIndex;
const dispatchableAssocIndex = (0, _dispatchable.default)('assocIndex', baseAssocIndex);
/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the given value.
 *
 * @function
 * @since v0.0.3
 * @category data
 * @param {number} index The index number to set
 * @param {*} value The new value
 * @param {Array} array The array to clone
 * @returns {Array} A new array equivalent to the original except for the changed index.
 * @example
 *
 * assocIndex(1, 'c', ['a', 'b']) //=> ['a', 'c']
 */

exports.dispatchableAssocIndex = dispatchableAssocIndex;
const assocIndex = (0, _curry.default)((index, value, array) => (0, _allWith.default)(([resolvedIndex, resolvedArray]) => dispatchableAssocIndex(resolvedIndex, value, resolvedArray), [index, array]));
var _default = assocIndex;
exports.default = _default;
//# sourceMappingURL=assocIndex.js.map