{"version":3,"sources":["../../src/data/join.js"],"names":["join","seperator","list","TypeError","toString"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,MAAMA,IAAI,GAAG,oBACX,mBAAK,MAAL,EAAa,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AAChC,MAAIA,IAAI,IAAI,IAAR,IAAgB,yBAAWA,IAAI,CAACF,IAAhB,CAApB,EAA2C;AACzC,WAAOE,IAAI,CAACF,IAAL,CAAUC,SAAV,CAAP;AACD;;AACD,QAAM,IAAIE,SAAJ,CAAe,GAAEC,QAAQ,CAACF,IAAD,CAAO,sCAAhC,CAAN;AACD,CALD,CADW,CAAb;eASeF,I","sourcesContent":["import curry from '../common/curry'\nimport defn from '../common/defn'\nimport isFunction from '../lang/isFunction'\n\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * Supports Promises. If a Promise is received for either parameter than the entire method will upgrade to async and return a Promise.\n *\n * @function\n * @since v0.0.6\n * @category data\n * @param {number|string|Promise<number|string>} separator The string used to separate the elements.\n * @param {Array|Promise<Array>} list The list of elements to join into a string.\n * @returns {string|Promise<string>} The string made by concatenating `list` with `separator`.\n * @example\n *\n * const spacer = join(' ')\n * spacer(['a', 2, 3.4])   //=> 'a 2 3.4'\n * join('|', [1, 2, 3])    //=> '1|2|3'\n * await join(Promise.resolve('|'), Promise.resolve([1, 2, 3]))    //=> '1|2|3'\n */\nconst join = curry(\n  defn('join', (seperator, list) => {\n    if (list != null && isFunction(list.join)) {\n      return list.join(seperator)\n    }\n    throw new TypeError(`${toString(list)} does not have a method named 'join'`)\n  })\n)\n\nexport default join\n"],"file":"join.js"}