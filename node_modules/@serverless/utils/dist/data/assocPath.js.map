{"version":3,"sources":["../../src/data/assocPath.js"],"names":["baseAssocPath","path","value","collection","length","part","nextCollection","Array","prototype","slice","call","dispatchableAssocPath","assocPath","resolvedPath","resolvedCollection"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,MAAMA,aAAa,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,UAAd,KAA6B;AACjD,MAAIF,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAOF,KAAP;AACD;;AAHgD,+BAIlCD,IAJkC;AAAA,QAI1CI,IAJ0C;;AAKjD,MAAIJ,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;AACnB,UAAME,cAAc,GAClB,CAAC,oBAAMH,UAAN,CAAD,IAAsB,kBAAIE,IAAJ,EAAUF,UAAV,CAAtB,GAA8CA,UAAU,CAACE,IAAD,CAAxD,GAAiE,wBAAUJ,IAAI,CAAC,CAAD,CAAd,IAAqB,EAArB,GAA0B,EAD7F;AAEAC,IAAAA,KAAK,GAAGF,aAAa,CAACO,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BT,IAA3B,EAAiC,CAAjC,CAAD,EAAsCC,KAAtC,EAA6CI,cAA7C,CAArB;AACD;;AACD,MAAI,wBAAUD,IAAV,KAAmB,sBAAQF,UAAR,CAAvB,EAA4C;AAC1C,WAAO,gCAAeE,IAAf,EAAqBH,KAArB,EAA4BC,UAA5B,CAAP;AACD;;AACD,SAAO,8BAAcE,IAAd,EAAoBH,KAApB,EAA2BC,UAA3B,CAAP;AACD,CAdD;;;AAgBA,MAAMQ,qBAAqB,GAAG,2BAAa,WAAb,EAA0BX,aAA1B,CAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMY,SAAS,GAAG,oBAAM,CAACX,IAAD,EAAOC,KAAP,EAAcC,UAAd,KACtB,sBACE,CAAC,CAACU,YAAD,EAAeC,kBAAf,CAAD,KACEH,qBAAqB,CAACE,YAAD,EAAeX,KAAf,EAAsBY,kBAAtB,CAFzB,EAGE,CAACb,IAAD,EAAOE,UAAP,CAHF,CADgB,CAAlB;eAQeS,S","sourcesContent":["import { baseAssocIndex } from './assocIndex'\nimport { baseAssocProp } from './assocProp'\nimport allWith from '../common/allWith'\nimport curry from '../common/curry'\nimport dispatchable from '../common/dispatchable'\nimport has from './has'\nimport isArray from '../lang/isArray'\nimport isInteger from '../lang/isInteger'\nimport isNil from '../lang/isNil'\n\nconst baseAssocPath = (path, value, collection) => {\n  if (path.length === 0) {\n    return value\n  }\n  const [part] = path\n  if (path.length > 1) {\n    const nextCollection =\n      !isNil(collection) && has(part, collection) ? collection[part] : isInteger(path[1]) ? [] : {}\n    value = baseAssocPath(Array.prototype.slice.call(path, 1), value, nextCollection)\n  }\n  if (isInteger(part) && isArray(collection)) {\n    return baseAssocIndex(part, value, collection)\n  }\n  return baseAssocProp(part, value, collection)\n}\n\nconst dispatchableAssocPath = dispatchable('assocPath', baseAssocPath)\n\n/**\n * Makes a shallow clone of an object, setting or overriding the nodes required\n * to create the given path, and placing the specific value at the tail end of\n * that path. Note that this copies and flattens prototype properties onto the\n * new object as well. All non-primitive properties are copied by reference.\n *\n * @function\n * @since v0.0.3\n * @category data\n * @param {Array} path The path to set\n * @param {*} value The new value\n * @param {*} collection The collection to clone\n * @returns {*} A new collection equivalent to the original except along the specified path.\n * @example\n *\n * assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}) //=> {a: {b: {c: 42}}}\n *\n * // Any missing or non-object keys in path will be overridden\n * assocPath(['a', 0, 'c'], 42, {a: 5}) //=> {a: [{c: 42}]}\n */\nconst assocPath = curry((path, value, collection) =>\n  allWith(\n    ([resolvedPath, resolvedCollection]) =>\n      dispatchableAssocPath(resolvedPath, value, resolvedCollection),\n    [path, collection]\n  )\n)\n\nexport default assocPath\n\nexport { baseAssocPath, dispatchableAssocPath }\n"],"file":"assocPath.js"}