"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.baseContainsWith = exports.default = void 0;

var _curry = _interopRequireDefault(require("../common/curry"));

var _defn = _interopRequireDefault(require("../common/defn"));

var _iterate = _interopRequireDefault(require("../common/iterate"));

var _pipe = _interopRequireDefault(require("../common/pipe"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const baseContainsWith = (predicate, value, collection) => (0, _iterate.default)(next => (0, _pipe.default)(pNext => {
  if (pNext.done) {
    return false;
  }

  return predicate(value, pNext.value);
}, result => {
  if (result || next.done) {
    return _objectSpread({}, next, {
      done: true,
      value: result
    });
  }

  return next;
})(next), collection);
/**
 * Returns `true` if the given predicate returns true for at least one value in the given collection.
 *
 * @function
 * @since v0.0.18
 * @category data
 * @param {*} value The value to compare against.
 * @param {*} collection The collection to consider.
 * @returns {boolean} `true` if an equivalent item is in the list, `false` otherwise.
 * @example
 *
 * contains(3, [1, 2, 3]) //=> true
 * contains(4, [1, 2, 3]) //=> false
 * contains({ name: 'Fred' }, [{ name: 'Fred' }]) //=> true
 * contains([42], [[42]]) //=> true
 */


exports.baseContainsWith = baseContainsWith;
const containsWith = (0, _curry.default)((0, _defn.default)('containsWith', baseContainsWith));
var _default = containsWith;
exports.default = _default;
//# sourceMappingURL=containsWith.js.map