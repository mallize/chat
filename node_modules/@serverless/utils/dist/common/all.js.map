{"version":3,"sources":["../../src/common/all.js"],"names":["baseAll","value","result","next","done","nextValue","kdx","all"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,OAAO,GAAG,0BAAaC,KAAD,IAAW;AACrC,MAAIC,MAAJ;;AACA,MAAI,sBAAQD,KAAR,KAAkB,yBAAWA,KAAX,CAAtB,EAAyC;AACvCC,IAAAA,MAAM,GAAG,EAAT;AACD,GAFD,MAEO,IAAI,uBAASD,KAAT,KAAmB,CAAC,yBAAWA,KAAX,CAAxB,EAA2C;AAChDC,IAAAA,MAAM,GAAG,EAAT;AACD,GAFM,MAEA;AACL,WAAOD,KAAP;AACD;;AAED,SAAO,0BAAaE,IAAD,IAAU;AAC3B,QAAIA,IAAI,CAACC,IAAT,EAAe;AACb,+BACKD,IADL;AAEEF,QAAAA,KAAK,EAAEC;AAFT;AAID;;AACD,WAAO,kCAAiBG,SAAD,IAAe;AACpCH,MAAAA,MAAM,CAACC,IAAI,CAACG,GAAN,CAAN,GAAmBD,SAAnB;AACA,aAAOF,IAAP;AACD,KAHM,EAGJA,IAAI,CAACF,KAHD,CAAP;AAID,GAXM,EAWJA,KAXI,CAAP;AAYD,CAtBe,CAAhB;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAMM,GAAG,GAAG,oBAAMP,OAAN,CAAZ;eAEeO,G","sourcesContent":["import { baseIterate } from './iterate'\nimport curry from './curry'\nimport isArray from '../lang/isArray'\nimport isFunction from '../lang/isFunction'\nimport isIterator from '../lang/isIterator'\nimport isObject from '../lang/isObject'\nimport resolveWith, { baseResolveWith } from './resolveWith'\n\nconst baseAll = resolveWith((value) => {\n  let result\n  if (isArray(value) || isIterator(value)) {\n    result = []\n  } else if (isObject(value) && !isFunction(value)) {\n    result = {}\n  } else {\n    return value\n  }\n\n  return baseIterate((next) => {\n    if (next.done) {\n      return {\n        ...next,\n        value: result\n      }\n    }\n    return baseResolveWith((nextValue) => {\n      result[next.kdx] = nextValue\n      return next\n    }, next.value)\n  }, value)\n})\n\n/**\n * Resolves all async values in an array or object\n *\n * Auto curried for placeholder support.\n *\n * @function\n * @since v0.0.6\n * @category common\n * @param {*} value The array or object whose values should be resolved. If value is not an object or array, the value is simply resolved to itself\n * @returns {*} The array or object with its values resolved\n * @example\n *\n * const nums = [\n *   1,\n *   Promise.resolve(2),\n *   (async () => 3)()\n * ]\n * await all(nums) //=> [ 1, 2, 3 ]\n *\n * const keyed = {\n *   a: 1,\n *   b: Promise.resolve(2),\n *   c: (async () => 3)()\n * }\n * await all(keyed) //=> { a: 1, b: 2, c: 3 }\n *\n * await all('abc') //=> 'abc'\n * await all(123) //=> 123\n */\nconst all = curry(baseAll)\n\nexport default all\n\nexport { baseAll }\n"],"file":"all.js"}