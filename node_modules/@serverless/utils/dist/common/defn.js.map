{"version":3,"sources":["../../src/common/defn.js"],"names":["defn","name","fn","arity","length","dispatcher","override","args","resolvedArgs","apply"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAMA,IAAI,GAAG,CAACC,IAAD,EAAOC,EAAP,KAAc;AACzB,QAAMC,KAAK,GAAGD,EAAE,CAACE,MAAjB;AACA,QAAMC,UAAU,GAAG,2BAAaJ,IAAb,EAAmBC,EAAnB,CAAnB;;AACA,QAAMI,QAAQ,GAAG,SAAXA,QAAW,CAAS,GAAGC,IAAZ,EAAkB;AACjC,WAAO,0BAAaC,YAAD,IAAkBH,UAAU,CAACI,KAAX,CAAiB,IAAjB,EAAuBD,YAAvB,CAA9B,EAAoED,IAApE,CAAP;AACD,GAFD;;AAGA,SAAO,yBAAWJ,KAAX,EAAkBG,QAAlB,CAAP;AACD,CAPD;;eASeN,I","sourcesContent":["import { baseAllWith } from './allWith'\nimport dispatchable from './dispatchable'\nimport nArySpread from './nArySpread'\n\n/**\n * Defines a function with a few predefined behaviours. Functions defined with this method will...\n * - [curry](#curry)\n * - [dispatch](#dispatchable)\n * - [resolve all args](#resolveAll)\n *\n * @function\n * @since v0.0.3\n * @category common\n * @sig defn(\n *   name: string,\n *   fn: (*) => any\n * ): (...args: any[], last: any) => last[name] ? last[name](...args) : defaultFn(...args)\n * @param {string} name The name of the method to call if it exists\n * @param {Function} fn The default function to execute if the named one does not exist on the last arg\n * @returns {Function} The wrapped function\n * @example\n *\n * const get = defn('get', (prop, value) => value[prop])\n * get('a', { a: 'foo' }) //=> 'foo'\n *\n * const obj = {\n *   props: {\n *     a: 'bar'\n *   }\n *   get: (prop) => obj.props[prop]\n * }\n * get('a', obj) //=> 'bar'\n */\nconst defn = (name, fn) => {\n  const arity = fn.length\n  const dispatcher = dispatchable(name, fn)\n  const override = function(...args) {\n    return baseAllWith((resolvedArgs) => dispatcher.apply(this, resolvedArgs), args)\n  }\n  return nArySpread(arity, override)\n}\n\nexport default defn\n"],"file":"defn.js"}