"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isArray = _interopRequireDefault(require("../lang/isArray"));

var _isFunction = _interopRequireDefault(require("../lang/isFunction"));

var _isObject = _interopRequireDefault(require("../lang/isObject"));

var _nArySpread = _interopRequireDefault(require("./nArySpread"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a function that dispatches with different strategies based on the object in list position (last argument). If it is an array, executes [fn].
 *
 * Otherwise, it will default to executing [fn].
 *
 * @function
 * @since v0.0.6
 * @category common
 * @param {string} name The name of the method to call if it exists
 * @param {Function} fn The default function to execute if the named one does not exist on the last arg
 * @returns {Function} A function that dispatches on object in list position
 * @example
 * const get = dispatchable('get', (prop, value) => value[prop])
 * get('a', { a: 'foo' }) //=> 'foo'
 *
 * const obj = {
 *   props: {
 *     a: 'bar'
 *   }
 *   get: (prop) => obj.props[prop]
 * }
 * get('a', obj) //=> 'bar'
 */
const dispatchable = (name, fn) => {
  const arity = fn.length;

  const override = function override(...args) {
    if (args.length === 0) {
      return fn.apply(this);
    }

    const obj = args[args.length - 1];

    if (!(0, _isArray.default)(obj) && (0, _isObject.default)(obj) && (0, _isFunction.default)(obj[name]) && obj !== this) {
      return obj[name](...args);
    }

    return fn.apply(this, args);
  };

  return (0, _nArySpread.default)(arity, override);
};

var _default = dispatchable;
exports.default = _default;
//# sourceMappingURL=dispatchable.js.map