{"version":3,"sources":["../../src/common/resolvable.js"],"names":["resolvable","fn","TypeError","resolve"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;AAkBA,MAAMA,UAAU,GAAG,oBAAOC,EAAD,IAAQ;AAC/B,MAAI,CAAC,yBAAWA,EAAX,CAAL,EAAqB;AACnB,UAAM,IAAIC,SAAJ,CAAe,4DAA2DD,EAAG,EAA7E,CAAN;AACD;;AACD,SAAO;AACLE,IAAAA,OAAO,EAAEF;AADJ,GAAP;AAGD,CAPkB,CAAnB;eASeD,U","sourcesContent":["import curry from './curry'\nimport isFunction from '../lang/isFunction'\n\n/**\n * Creates an object that resolves to the result of the given function.\n *\n * @function\n * @since v0.0.16\n * @category common\n * @param {Function} fn The function to generate the resolved value.\n * @returns {Object} The resolvable object\n * @example\n *\n * const resolveLater = resolvable(() => 'foo')\n * // => {\n * //   resolve: () => 'foo'\n * // }\n *\n * resolve(resolveLater)\n * //=> 'foo'\n */\nconst resolvable = curry((fn) => {\n  if (!isFunction(fn)) {\n    throw new TypeError(`resolvable expects fn to be a Function. Instead received ${fn}`)\n  }\n  return {\n    resolve: fn\n  }\n})\n\nexport default resolvable\n"],"file":"resolvable.js"}