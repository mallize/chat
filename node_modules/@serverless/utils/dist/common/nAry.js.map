{"version":3,"sources":["../../src/common/nAry.js"],"names":["nAry","n","fn","idx","argNames","push","func","Function","join"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAMA,IAAI,GAAG,oBAAM,CAACC,CAAD,EAAIC,EAAJ,KAAW;AAC5B,MAAIC,GAAG,GAAG,CAAV;AACA,QAAMC,QAAQ,GAAG,EAAjB;;AACA,SAAOD,GAAG,GAAGF,CAAb,EAAgB;AACdG,IAAAA,QAAQ,CAACC,IAAT,CAAe,IAAGF,GAAI,EAAtB;AACAA,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,QAAMG,IAAI,GAAG,IAAIC,QAAJ,CACX,IADW,EAEX,GAFW,EAGV,mBAAkBH,QAAQ,CAACI,IAAT,CAAc,IAAd,CAAoB;;MAH5B,CAAb;AAOA,SAAOF,IAAI,CAACJ,EAAD,EAAKD,CAAL,CAAX;AACD,CAfY,CAAb;eAiBeD,I","sourcesContent":["import curry from './curry'\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts exactly `n` parameters. Any extraneous parameters will not be passed to the supplied function.\n *\n * @function\n * @since v0.0.3\n * @category common\n * @param {Number} n The desired arity of the new function.\n * @param {Function} fn The function to wrap.\n * @returns {Function} A new function wrapping `fn`. The new function is guaranteed to be of arity `n`.\n * @example\n *\n * const takesTwoArgs = (a, b) => [a, b]\n *\n * takesTwoArgs.length //=> 2\n * takesTwoArgs(1, 2) //=> [1, 2]\n *\n * const takesOneArg = nAry(1, takesTwoArgs)\n * takesOneArg.length //=> 1\n * // Only `n` arguments are passed to the wrapped function\n * takesOneArg(1, 2) //=> [1, undefined]\n */\nconst nAry = curry((n, fn) => {\n  let idx = 0\n  const argNames = []\n  while (idx < n) {\n    argNames.push(`a${idx}`)\n    idx += 1\n  }\n  const func = new Function(\n    'fn',\n    'n',\n    `return function(${argNames.join(', ')}) {\n      return fn.apply(this, Array.prototype.slice.call(arguments, 0, n));\n    }`\n  )\n  return func(fn, n)\n})\n\nexport default nAry\n"],"file":"nAry.js"}