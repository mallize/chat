{"version":3,"sources":["../../src/common/iterator.js"],"names":["baseIterator","value","start","SYMBOL_ITERATOR","Error","iterator","END","START"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAK,GAAG,OAAhB,KAA4B;AAC/C,MAAI,yBAAWD,KAAX,CAAJ,EAAuB;AACrB,WAAO,+BAAiBA,KAAjB,EAAwBC,KAAxB,CAAP;AACD;;AACD,MAAI,0BAAYD,KAAZ,CAAJ,EAAwB;AACtB,WAAO,gCAAkBA,KAAlB,EAAyBC,KAAzB,CAAP;AACD;;AACD,MAAI,yBAAWD,KAAX,CAAJ,EAAuB;AACrB,WAAO,+BAAiBA,KAAK,CAACE,0BAAD,CAAL,EAAjB,EAA2CD,KAA3C,CAAP;AACD;;AACD,MAAI,2BAAaD,KAAb,CAAJ,EAAyB;AACvB,WAAO,6BAAeA,KAAf,EAAsBC,KAAtB,CAAP;AACD;;AACD,QAAM,IAAIE,KAAJ,CACH,uFAAsFH,KAAM,GADzF,CAAN;AAGD,CAhBD;AAkBA;;;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMI,QAAQ,GAAG,oBAAML,YAAN,CAAjB;AAEAK,QAAQ,CAACC,GAAT,GAAe,KAAf;AACAD,QAAQ,CAACE,KAAT,GAAiB,OAAjB;eAEeF,Q","sourcesContent":["import { SYMBOL_ITERATOR } from '../constants'\nimport arrayLikeIterator from '../lang/arrayLikeIterator'\nimport curry from './curry'\nimport isArrayLike from '../lang/isArrayLike'\nimport isIterable from '../lang/isIterable'\nimport isIterator from '../lang/isIterator'\nimport isObjectLike from '../lang/isObjectLike'\nimport iteratorResolver from './iteratorResolver'\nimport objectIterator from '../lang/objectIterator'\n\nconst baseIterator = (value, start = 'START') => {\n  if (isIterator(value)) {\n    return iteratorResolver(value, start)\n  }\n  if (isArrayLike(value)) {\n    return arrayLikeIterator(value, start)\n  }\n  if (isIterable(value)) {\n    return iteratorResolver(value[SYMBOL_ITERATOR](), start)\n  }\n  if (isObjectLike(value)) {\n    return objectIterator(value, start)\n  }\n  throw new Error(\n    `iterator method expected to receive an iterable value. Instead the method was given ${value}.`\n  )\n}\n\n/**\n * This method generates an iterator for the given value\n *\n * @function\n * @since v0.0.11\n * @category common\n * @param {Function} fn The iteratee Function\n * @param  {*} collection The collection or iterator to iterate over\n * @returns {*} The final value returned when the iteratee returns done or `undefined`\n * @example\n *\n * iterator(['a', 'b', 'c'])\n * //=> { next: () => { value: string, index: number, kdx: umber, done: boolean }}\n *\n * iterator('abc')\n * //=> { next: () => { value: string, index: number, kdx: umber, done: boolean }}\n *\n * iterator({ a: 1, b: 2, c: 3 })\n * //=> { next: () => { value: number, key: string, kdx: string, done: boolean }}\n */\nconst iterator = curry(baseIterator)\n\niterator.END = 'END'\niterator.START = 'START'\n\nexport default iterator\n\nexport { baseIterator }\n"],"file":"iterator.js"}