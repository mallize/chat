{"version":3,"sources":["../../src/common/deferredPromise.js"],"names":["deferredPromise","rejectPromise","resolvePromise","promise","Promise","resolve","reject"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;AAcA,MAAMA,eAAe,GAAG,MAAM;AAC5B,MAAIC,aAAJ;AACA,MAAIC,cAAJ;AACA,QAAMC,OAAO,GAAG,IAAIC,iBAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/CL,IAAAA,aAAa,GAAGK,MAAhB;AACAJ,IAAAA,cAAc,GAAGG,OAAjB;AACD,GAHe,CAAhB;AAIAF,EAAAA,OAAO,CAACG,MAAR,GAAiBL,aAAjB;AACAE,EAAAA,OAAO,CAACE,OAAR,GAAkBH,cAAlB;AACA,SAAOC,OAAP;AACD,CAVD;;eAYeH,e","sourcesContent":["import Promise from 'bluebird'\n\n/**\n * Creates a promise with the resolve and reject methods exposed as properties\n * on the promise.\n *\n * @function\n * @since v0.0.3\n * @category common\n * @returns {Promise} The promise with exposed methods\n * @example\n *\n * const promise = deferredPromise()\n * // ... do something async then eventually resolve the promise\n * promise.resolve(someValue)\n */\nconst deferredPromise = () => {\n  let rejectPromise\n  let resolvePromise\n  const promise = new Promise((resolve, reject) => {\n    rejectPromise = reject\n    resolvePromise = resolve\n  })\n  promise.reject = rejectPromise\n  promise.resolve = resolvePromise\n  return promise\n}\n\nexport default deferredPromise\n"],"file":"deferredPromise.js"}