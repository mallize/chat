{"version":3,"sources":["../../src/common/resolveWith.js"],"names":["baseResolveWith","fn","value","then","resolved","resolveWith"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,eAAe,GAAG,CAACC,EAAD,EAAKC,KAAL,KAAe;AACrC,MAAI,CAAC,gCAAeA,KAAf,CAAL,EAA4B;AAC1B,QAAI,wBAAUA,KAAV,CAAJ,EAAsB;AACpB,aAAOA,KAAK,CAACC,IAAN,CAAYC,QAAD,IAAcJ,eAAe,CAACC,EAAD,EAAKG,QAAL,CAAxC,CAAP;AACD;;AACD,QAAI,0BAAYF,KAAZ,KAAsB,oBAASA,KAAT,CAA1B,EAA2C;AACzC,aAAO,wDAA2BD,EAA3B,EAA+BC,KAA/B,CAAP;AACD;;AACDA,IAAAA,KAAK,GAAG,0BAAYA,KAAZ,CAAR;AACD;;AACDA,EAAAA,KAAK,GAAGD,EAAE,CAACC,KAAD,CAAV;;AACA,MAAI,CAAC,gCAAeA,KAAf,CAAL,EAA4B;AAC1B,WAAO,0BAAYA,KAAZ,CAAP;AACD;;AACD,SAAOA,KAAP;AACD,CAfD;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAMG,WAAW,GAAG,oBAAML,eAAN,CAApB;eAEeK,W","sourcesContent":["import { baseIsOp } from './isOp'\nimport { baseIsResolved } from './isResolved'\nimport { baseResolve } from './resolve'\nimport { baseResolveToGeneratorWith } from './resolveToGeneratorWith'\nimport curry from './curry'\nimport isGenerator from '../lang/isGenerator'\nimport isPromise from '../lang/isPromise'\n\nconst baseResolveWith = (fn, value) => {\n  if (!baseIsResolved(value)) {\n    if (isPromise(value)) {\n      return value.then((resolved) => baseResolveWith(fn, resolved))\n    }\n    if (isGenerator(value) || baseIsOp(value)) {\n      return baseResolveToGeneratorWith(fn, value)\n    }\n    value = baseResolve(value)\n  }\n  value = fn(value)\n  if (!baseIsResolved(value)) {\n    return baseResolve(value)\n  }\n  return value\n}\n\n/**\n * Resolves a value to the given method.\n *\n * If the value to be resolved is a promise then this method will return a promise. The fn method will be triggered once the promise resolves.\n *\n * If the value to be resolved is a generator, this method will return a generator.\n *\n * @function\n * @since v0.0.11\n * @category common\n * @param {Function} fn The function to execute at the end of the resolution\n * @param {*} value The value to resolve with the generator\n * @returns {Generator}\n * @example\n *\n * await resolveWith(\n *   (resolvedValue) => 'bar' // resolvedValue == 'foo'\n *   Promise.resolve('foo')\n * ) //=> 'bar'\n *\n * resolveWith(\n *   (resolvedValue) => 'bar' // resolvedValue == 'foo'\n *   'foo'\n * ) //=> 'bar'\n */\nconst resolveWith = curry(baseResolveWith)\n\nexport default resolveWith\n\nexport { baseResolveWith }\n"],"file":"resolveWith.js"}