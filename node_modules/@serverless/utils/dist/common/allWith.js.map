{"version":3,"sources":["../../src/common/allWith.js"],"names":["baseAllWith","fn","value","allWith"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,WAAW,GAAG,CAACC,EAAD,EAAKC,KAAL,KAAe,kCAAgBD,EAAhB,EAAoB,kBAAQC,KAAR,CAApB,CAAnC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,MAAMC,OAAO,GAAG,oBAAMH,WAAN,CAAhB;eAEeG,O","sourcesContent":["import { baseAll } from './all'\nimport { baseResolveWith } from './resolveWith'\nimport curry from './curry'\n\nconst baseAllWith = (fn, value) => baseResolveWith(fn, baseAll(value))\n\n/**\n * Resolves all async values in an array or object and executes the given with the result\n *\n * Auto curried for placeholder support.\n *\n * @function\n * @since v0.0.13\n * @category common\n * @param {Function} fn The function to execute at the end of the resolution\n * @param {*} value The array or object whose values should be resolved. If value is not an object or array, the value is simply resolved to itself\n * @returns {*} The array or object with its values resolved\n * @example\n *\n * const nums = [\n *   1,\n *   Promise.resolve(2),\n *   (async () => 3)()\n * ]\n * await allWith(\n *   (resolvedNums) => 'foo', // [ 1, 2, 3 ]\n *   nums\n * ) // => 'foo'\n *\n * const keyed = {\n *   a: 1,\n *   b: Promise.resolve(2),\n *   c: (async () => 3)()\n * }\n *\n * await allWith(\n *   (resolvedNums) => 'foo', // { a: 1, b: 2, c: 3 }\n *   keyed\n * ) // => 'foo'\n *\n * allWith(\n *   (resolvedNums) => 'foo', // [ 1, 2, 3 ]\n *   [ 1, 2, 3 ]\n * ) // => 'foo'\n */\nconst allWith = curry(baseAllWith)\n\nexport default allWith\n\nexport { baseAllWith }\n"],"file":"allWith.js"}