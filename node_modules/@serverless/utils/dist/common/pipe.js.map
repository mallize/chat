{"version":3,"sources":["../../src/common/pipe.js"],"names":["pipe","functions","length","identity","firstFunc","rest","args","piped","func"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;AAmBA,MAAMA,IAAI,GAAG,CAAC,GAAGC,SAAJ,KAAkB;AAC7BA,EAAAA,SAAS,GAAG,2BAAaA,SAAb,CAAZ;AAD6B,qBAEVA,SAFU;AAAA,QAErBC,MAFqB,cAErBA,MAFqB;;AAG7B,MAAIA,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAOC,iBAAP;AACD;;AAED,MAAID,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAOD,SAAS,CAAC,CAAD,CAAhB;AACD;;AAED,QAAMG,SAAS,GAAGH,SAAS,CAAC,CAAD,CAA3B;AACA,QAAMI,IAAI,GAAG,6BAAeJ,SAAf,EAA0B,CAA1B,CAAb;AAEA,SAAO,CAAC,GAAGK,IAAJ,KAAa,8BAAgBD,IAAhB,EAAsBD,SAAS,CAAC,GAAGE,IAAJ,CAA/B,EAA0C,CAACC,KAAD,EAAQC,IAAR,KAAiBA,IAAI,CAACD,KAAD,CAA/D,CAApB;AACD,CAfD;;eAiBeP,I","sourcesContent":["import arrayFlatten from '../lang/arrayFlatten'\nimport arrayLikeReduce from '../lang/arrayLikeReduce'\nimport arrayLikeSlice from '../lang/arrayLikeSlice'\nimport identity from './identity'\n\n// TODO BRN: This method is important at a fundamental level. Need to rewrite this to not depend upon data methods.\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @function\n * @since v0.0.11\n * @category common\n * @param {...Function} functions\n * @returns {Function}\n * @example\n *\n * const f = pipe(Math.pow, negate, inc)\n *\n * f(3, 4) // -(3^4) + 1\n */\nconst pipe = (...functions) => {\n  functions = arrayFlatten(functions)\n  const { length } = functions\n  if (length === 0) {\n    return identity\n  }\n\n  if (length === 1) {\n    return functions[0]\n  }\n\n  const firstFunc = functions[0]\n  const rest = arrayLikeSlice(functions, 1)\n\n  return (...args) => arrayLikeReduce(rest, firstFunc(...args), (piped, func) => func(piped))\n}\n\nexport default pipe\n"],"file":"pipe.js"}