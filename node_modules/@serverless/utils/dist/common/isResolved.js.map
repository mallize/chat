{"version":3,"sources":["../../src/common/isResolved.js"],"names":["baseIsResolved","value","resolve","isResolved"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,cAAc,GAAIC,KAAD,IACrB,CAAC,uBAASA,KAAT,CAAD,IACA,EAAE,wBAAUA,KAAV,KAAoB,yBAAWA,KAAK,CAACC,OAAjB,CAApB,IAAiD,0BAAYD,KAAZ,CAAjD,IAAuE,oBAASA,KAAT,CAAzE,CAFF;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,MAAME,UAAU,GAAG,oBAAMH,cAAN,CAAnB;eAEeG,U","sourcesContent":["import { baseIsOp } from './isOp'\nimport curry from './curry'\nimport isFunction from '../lang/isFunction'\nimport isGenerator from '../lang/isGenerator'\nimport isObject from '../lang/isObject'\nimport isPromise from '../lang/isPromise'\n\nconst baseIsResolved = (value) =>\n  !isObject(value) ||\n  !(isPromise(value) || isFunction(value.resolve) || isGenerator(value) || baseIsOp(value))\n\n/**\n * Determines if the value is a resolvable value.\n *\n * @function\n * @since v0.0.11\n * @category common\n * @param {*} value\n * @returns {boolean}\n * @example\n *\n * isResolved({\n *   ['@@redux-saga/IO']: 'op'\n * })\n * //=> false\n *\n * isResolved((function* () {})())\n * //=> false\n *\n * isResolved(new Promise(() => {})))\n * //=> false\n *\n * isResolved({ resolve: () => 'foo' })\n * //=> false\n *\n * isResolved(null)\n * //=> true\n *\n * isResolved(undefined)\n * //=> true\n *\n * isResolved('abc')\n * //=> true\n */\nconst isResolved = curry(baseIsResolved)\n\nexport default isResolved\n\nexport { baseIsResolved }\n"],"file":"isResolved.js"}