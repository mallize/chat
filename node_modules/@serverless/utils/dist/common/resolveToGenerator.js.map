{"version":3,"sources":["../../src/common/resolveToGenerator.js"],"names":["baseResolveToGenerator","value","result","resolve","resolveToGenerator"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,sBAAsB,GAAG,UAAzBA,sBAAyB,CAAUC,KAAV,EAAiB;AAC9C,MAAI,CAAC,gCAAeA,KAAf,CAAL,EAA4B;AAC1B,QAAIC,MAAJ;;AACA,QAAI,0BAAYD,KAAZ,CAAJ,EAAwB;AACtBC,MAAAA,MAAM,GAAG,OAAOD,KAAhB;AACD,KAFD,MAEO,IAAI,yBAAWA,KAAK,CAACE,OAAjB,CAAJ,EAA+B;AACpCD,MAAAA,MAAM,GAAGD,KAAK,CAACE,OAAN,EAAT;AACD,KAFM,MAEA;AACLD,MAAAA,MAAM,GAAG,MAAMD,KAAf;AACD;;AACD,WAAO,OAAOD,sBAAsB,CAACE,MAAD,CAApC;AACD;;AACD,SAAOD,KAAP;AACD,CAbD;AAeA;;;;;;;;;;;;;;;;AAaA,MAAMG,kBAAkB,GAAG,oBAAMJ,sBAAN,CAA3B;eAEeI,kB","sourcesContent":["import { baseIsResolved } from './isResolved'\nimport curry from './curry'\nimport isFunction from '../lang/isFunction'\nimport isGenerator from '../lang/isGenerator'\n\nconst baseResolveToGenerator = function*(value) {\n  if (!baseIsResolved(value)) {\n    let result\n    if (isGenerator(value)) {\n      result = yield* value\n    } else if (isFunction(value.resolve)) {\n      result = value.resolve()\n    } else {\n      result = yield value\n    }\n    return yield* baseResolveToGenerator(result)\n  }\n  return value\n}\n\n/**\n * Resolves a value to a generator using the generator to yield values.\n *\n * @function\n * @since v0.0.16\n * @category common\n * @param {*} value The value to resolve with the generator\n * @returns {Generator}\n * @example\n *\n * const generator = resolveToGenerator('foo')\n * generator.next() //=> { value: 'foo', done: true }\n */\nconst resolveToGenerator = curry(baseResolveToGenerator)\n\nexport default resolveToGenerator\n\nexport { baseResolveToGenerator }\n"],"file":"resolveToGenerator.js"}