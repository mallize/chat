"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arrayLikeReduce = _interopRequireDefault(require("../lang/arrayLikeReduce"));

var _curry = _interopRequireDefault(require("./curry"));

var _isFunction = _interopRequireDefault(require("../lang/isFunction"));

var _isPromise = _interopRequireDefault(require("../lang/isPromise"));

var _reflectOwnKeys = _interopRequireDefault(require("../lang/reflectOwnKeys"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mixClass = (Class, SuperClass) => {
  if (!(0, _isFunction.default)(Class)) {
    const NewClass = class extends SuperClass {};
    return (0, _arrayLikeReduce.default)((0, _reflectOwnKeys.default)(Class), NewClass, (AccClass, methodName) => {
      if (methodName !== 'constructor') {
        AccClass.prototype[methodName] = Class[methodName];
      }

      return AccClass;
    });
  }

  return Class;
};
/**
 * Returns an object with a `with` method that can be used to mix the given class with mixins
 *
 * @function
 * @since v0.0.4
 * @category common
 * @param {class} SuperClass The class that you want the mixins to extend
 * @param {...*} args Additional arguments to pass to the mixin
 * @returns {{
 *   with: (
 *     ...mixins: (SuperClass: class, ...args: *) => class
 *   ) => class
 * }}
 * @example
 *
 * const mixin = (SuperClass, ...args) => class extends SuperClass { ... }
 * class mix(Parent, ...args).with(mixin) { ... }
 */


const mix = (0, _curry.default)((SuperClass, ...args) => ({
  with: (...mixins) => (0, _arrayLikeReduce.default)(mixins, SuperClass, (SClass, mixin) => {
    let NewClass = mixin;

    if ((0, _isFunction.default)(mixin)) {
      NewClass = mixin(SClass, ...args);
    }

    if ((0, _isPromise.default)(NewClass)) {
      return NewClass.then(resolved => mixClass(resolved, SClass));
    }

    return mixClass(NewClass, SClass);
  })
}));
var _default = mix;
exports.default = _default;
//# sourceMappingURL=mix.js.map