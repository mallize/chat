"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.baseAll = exports.default = void 0;

var _iterate = require("./iterate");

var _curry = _interopRequireDefault(require("./curry"));

var _isArray = _interopRequireDefault(require("../lang/isArray"));

var _isFunction = _interopRequireDefault(require("../lang/isFunction"));

var _isIterator = _interopRequireDefault(require("../lang/isIterator"));

var _isObject = _interopRequireDefault(require("../lang/isObject"));

var _resolveWith = _interopRequireWildcard(require("./resolveWith"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const baseAll = (0, _resolveWith.default)(value => {
  let result;

  if ((0, _isArray.default)(value) || (0, _isIterator.default)(value)) {
    result = [];
  } else if ((0, _isObject.default)(value) && !(0, _isFunction.default)(value)) {
    result = {};
  } else {
    return value;
  }

  return (0, _iterate.baseIterate)(next => {
    if (next.done) {
      return _objectSpread({}, next, {
        value: result
      });
    }

    return (0, _resolveWith.baseResolveWith)(nextValue => {
      result[next.kdx] = nextValue;
      return next;
    }, next.value);
  }, value);
});
/**
 * Resolves all async values in an array or object
 *
 * Auto curried for placeholder support.
 *
 * @function
 * @since v0.0.6
 * @category common
 * @param {*} value The array or object whose values should be resolved. If value is not an object or array, the value is simply resolved to itself
 * @returns {*} The array or object with its values resolved
 * @example
 *
 * const nums = [
 *   1,
 *   Promise.resolve(2),
 *   (async () => 3)()
 * ]
 * await all(nums) //=> [ 1, 2, 3 ]
 *
 * const keyed = {
 *   a: 1,
 *   b: Promise.resolve(2),
 *   c: (async () => 3)()
 * }
 * await all(keyed) //=> { a: 1, b: 2, c: 3 }
 *
 * await all('abc') //=> 'abc'
 * await all(123) //=> 123
 */

exports.baseAll = baseAll;
const all = (0, _curry.default)(baseAll);
var _default = all;
exports.default = _default;
//# sourceMappingURL=all.js.map