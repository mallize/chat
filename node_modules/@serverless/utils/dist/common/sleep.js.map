{"version":3,"sources":["../../src/common/sleep.js"],"names":["sleep","wait","Promise","resolve","setTimeout"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA;;;;;;;;;;;;;;;;AAgBA,MAAMA,KAAK,GAAG;AAAA;AAAA;AAAA,+BAAM,WAAOC,IAAP;AAAA,WAAgB,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAAC,MAAMD,OAAO,EAAd,EAAkBF,IAAlB,CAAnC,CAAhB;AAAA,GAAN;;AAAA;AAAA;AAAA;AAAA,IAAd;eAEeD,K","sourcesContent":["import curry from './curry'\n\n/**\n * Sleeps for the given amount of `wait` milliseconds before resolving the returned `Promise`\n *\n * @function\n * @since v0.0.4\n * @category common\n * @sig sleep(\n *   wait: number\n * ): Promise\n * @param {number} wait The number of milliseconds to wait before resoliving the Promise\n * @returns {Promise} Resolves once the given amount of time has ellapsed.\n * @example\n *\n * await sleep(1000)\n * // 1000+ milliseconds later\n */\nconst sleep = curry(async (wait) => new Promise((resolve) => setTimeout(() => resolve(), wait)))\n\nexport default sleep\n"],"file":"sleep.js"}