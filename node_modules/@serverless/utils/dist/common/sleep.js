"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _curry = _interopRequireDefault(require("./curry"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Sleeps for the given amount of `wait` milliseconds before resolving the returned `Promise`
 *
 * @function
 * @since v0.0.4
 * @category common
 * @sig sleep(
 *   wait: number
 * ): Promise
 * @param {number} wait The number of milliseconds to wait before resoliving the Promise
 * @returns {Promise} Resolves once the given amount of time has ellapsed.
 * @example
 *
 * await sleep(1000)
 * // 1000+ milliseconds later
 */
const sleep = (0, _curry.default)(
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (wait) {
    return new Promise(resolve => setTimeout(() => resolve(), wait));
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
var _default = sleep;
exports.default = _default;
//# sourceMappingURL=sleep.js.map