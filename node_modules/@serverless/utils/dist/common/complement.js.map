{"version":3,"sources":["../../src/common/complement.js"],"names":["complement","fn","TypeError","result","apply","arguments","then","resolvedResult"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;AAgBA,MAAMA,UAAU,GAAG,oBAAOC,EAAD,IAAQ;AAC/B,MAAI,CAAC,yBAAWA,EAAX,CAAL,EAAqB;AACnB,UAAM,IAAIC,SAAJ,CAAe,8DAA6DD,EAAG,GAA/E,CAAN;AACD;;AACD,SAAO,YAAW;AAChB,UAAME,MAAM,GAAGF,EAAE,CAACG,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAf;;AACA,QAAI,wBAAUF,MAAV,CAAJ,EAAuB;AACrB,aAAOA,MAAM,CAACG,IAAP,CAAaC,cAAD,IAAoB,CAACA,cAAjC,CAAP;AACD;;AACD,WAAO,CAACJ,MAAR;AACD,GAND;AAOD,CAXkB,CAAnB;eAaeH,U","sourcesContent":["import curry from './curry'\nimport isFunction from '../lang/isFunction'\nimport isPromise from '../lang/isPromise'\n\n/**\n * returns a new function that logically nots the returned value and returns that as the result.\n *\n * Auto-curried for placeholder support\n *\n * @function\n * @since v0.0.10\n * @category common\n * @param {Function} fn The function to complement\n * @returns {Function} The complemented function\n * @example\n *\n * const isEven = (value) => value % 2 === 0\n * const isOdd = complement(isEven)\n * isOdd(1) //=> true\n */\nconst complement = curry((fn) => {\n  if (!isFunction(fn)) {\n    throw new TypeError(`Expected 'fn' parameter to be a function. Instead received ${fn}.`)\n  }\n  return function() {\n    const result = fn.apply(this, arguments)\n    if (isPromise(result)) {\n      return result.then((resolvedResult) => !resolvedResult)\n    }\n    return !result\n  }\n})\n\nexport default complement\n"],"file":"complement.js"}