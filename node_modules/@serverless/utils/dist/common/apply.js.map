{"version":3,"sources":["../../src/common/apply.js"],"names":["apply","fn","args"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;AAcA,MAAMA,KAAK,GAAG,oBAAM,UAASC,EAAT,EAAaC,IAAb,EAAmB;AACrC,SAAOD,EAAE,CAACD,KAAH,CAAS,IAAT,EAAeE,IAAf,CAAP;AACD,CAFa,CAAd;eAIeF,K","sourcesContent":["import curry from './curry'\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for creating a fixed-arity function from a variadic function. `fn` should be a bound function if context is significant.\n *\n * @function\n * @since v0.0.6\n * @category common\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @returns {*} The result, equivalent to `fn(...args)`\n * @example\n *\n * const nums = [1, 2, 3, -99, 42, 6, 7]\n * apply(Math.max, nums) //=> 42\n */\nconst apply = curry(function(fn, args) {\n  return fn.apply(this, args)\n})\n\nexport default apply\n"],"file":"apply.js"}