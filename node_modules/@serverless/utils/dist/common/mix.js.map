{"version":3,"sources":["../../src/common/mix.js"],"names":["mixClass","Class","SuperClass","NewClass","AccClass","methodName","prototype","mix","args","with","mixins","SClass","mixin","then","resolved"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,QAAQ,GAAG,CAACC,KAAD,EAAQC,UAAR,KAAuB;AACtC,MAAI,CAAC,yBAAWD,KAAX,CAAL,EAAwB;AACtB,UAAME,QAAQ,GAAG,cAAcD,UAAd,CAAyB,EAA1C;AACA,WAAO,8BAAgB,6BAAeD,KAAf,CAAhB,EAAuCE,QAAvC,EAAiD,CAACC,QAAD,EAAWC,UAAX,KAA0B;AAChF,UAAIA,UAAU,KAAK,aAAnB,EAAkC;AAChCD,QAAAA,QAAQ,CAACE,SAAT,CAAmBD,UAAnB,IAAiCJ,KAAK,CAACI,UAAD,CAAtC;AACD;;AACD,aAAOD,QAAP;AACD,KALM,CAAP;AAMD;;AACD,SAAOH,KAAP;AACD,CAXD;AAaA;;;;;;;;;;;;;;;;;;;;AAkBA,MAAMM,GAAG,GAAG,oBAAM,CAACL,UAAD,EAAa,GAAGM,IAAhB,MAA0B;AAC1CC,EAAAA,IAAI,EAAE,CAAC,GAAGC,MAAJ,KACJ,8BAAgBA,MAAhB,EAAwBR,UAAxB,EAAoC,CAACS,MAAD,EAASC,KAAT,KAAmB;AACrD,QAAIT,QAAQ,GAAGS,KAAf;;AACA,QAAI,yBAAWA,KAAX,CAAJ,EAAuB;AACrBT,MAAAA,QAAQ,GAAGS,KAAK,CAACD,MAAD,EAAS,GAAGH,IAAZ,CAAhB;AACD;;AACD,QAAI,wBAAUL,QAAV,CAAJ,EAAyB;AACvB,aAAOA,QAAQ,CAACU,IAAT,CAAeC,QAAD,IAAcd,QAAQ,CAACc,QAAD,EAAWH,MAAX,CAApC,CAAP;AACD;;AACD,WAAOX,QAAQ,CAACG,QAAD,EAAWQ,MAAX,CAAf;AACD,GATD;AAFwC,CAA1B,CAAN,CAAZ;eAceJ,G","sourcesContent":["import arrayLikeReduce from '../lang/arrayLikeReduce'\nimport curry from './curry'\nimport isFunction from '../lang/isFunction'\nimport isPromise from '../lang/isPromise'\nimport reflectOwnKeys from '../lang/reflectOwnKeys'\n\nconst mixClass = (Class, SuperClass) => {\n  if (!isFunction(Class)) {\n    const NewClass = class extends SuperClass {}\n    return arrayLikeReduce(reflectOwnKeys(Class), NewClass, (AccClass, methodName) => {\n      if (methodName !== 'constructor') {\n        AccClass.prototype[methodName] = Class[methodName]\n      }\n      return AccClass\n    })\n  }\n  return Class\n}\n\n/**\n * Returns an object with a `with` method that can be used to mix the given class with mixins\n *\n * @function\n * @since v0.0.4\n * @category common\n * @param {class} SuperClass The class that you want the mixins to extend\n * @param {...*} args Additional arguments to pass to the mixin\n * @returns {{\n *   with: (\n *     ...mixins: (SuperClass: class, ...args: *) => class\n *   ) => class\n * }}\n * @example\n *\n * const mixin = (SuperClass, ...args) => class extends SuperClass { ... }\n * class mix(Parent, ...args).with(mixin) { ... }\n */\nconst mix = curry((SuperClass, ...args) => ({\n  with: (...mixins) =>\n    arrayLikeReduce(mixins, SuperClass, (SClass, mixin) => {\n      let NewClass = mixin\n      if (isFunction(mixin)) {\n        NewClass = mixin(SClass, ...args)\n      }\n      if (isPromise(NewClass)) {\n        return NewClass.then((resolved) => mixClass(resolved, SClass))\n      }\n      return mixClass(NewClass, SClass)\n    })\n}))\n\nexport default mix\n"],"file":"mix.js"}