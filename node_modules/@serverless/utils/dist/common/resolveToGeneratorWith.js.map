{"version":3,"sources":["../../src/common/resolveToGeneratorWith.js"],"names":["baseResolveToGeneratorWith","fn","value","result","resolveToGeneratorWith"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,0BAA0B,GAAG,UAA7BA,0BAA6B,CAAUC,EAAV,EAAcC,KAAd,EAAqB;AACtD,MAAI,CAAC,gCAAeA,KAAf,CAAL,EAA4B;AAC1BA,IAAAA,KAAK,GAAG,0BAAYA,KAAZ,CAAR;AACA,QAAIC,MAAJ;;AACA,QAAI,0BAAYD,KAAZ,CAAJ,EAAwB;AACtBC,MAAAA,MAAM,GAAG,OAAOD,KAAhB;AACD,KAFD,MAEO;AACLC,MAAAA,MAAM,GAAG,MAAMD,KAAf;AACD;;AACD,WAAO,OAAOF,0BAA0B,CAACC,EAAD,EAAKE,MAAL,CAAxC;AACD;;AACDD,EAAAA,KAAK,GAAGD,EAAE,CAACC,KAAD,CAAV;;AACA,MAAI,CAAC,gCAAeA,KAAf,CAAL,EAA4B;AAC1B,WAAO,OAAO,gDAAuBA,KAAvB,CAAd;AACD;;AACD,SAAOA,KAAP;AACD,CAhBD;AAkBA;;;;;;;;;;;;;;;;;;;;AAiBA,MAAME,sBAAsB,GAAG,oBAAMJ,0BAAN,CAA/B;eAEeI,sB","sourcesContent":["import { baseIsResolved } from './isResolved'\nimport { baseResolve } from './resolve'\nimport { baseResolveToGenerator } from './resolveToGenerator'\nimport curry from './curry'\nimport isGenerator from '../lang/isGenerator'\n\nconst baseResolveToGeneratorWith = function*(fn, value) {\n  if (!baseIsResolved(value)) {\n    value = baseResolve(value)\n    let result\n    if (isGenerator(value)) {\n      result = yield* value\n    } else {\n      result = yield value\n    }\n    return yield* baseResolveToGeneratorWith(fn, result)\n  }\n  value = fn(value)\n  if (!baseIsResolved(value)) {\n    return yield* baseResolveToGenerator(value)\n  }\n  return value\n}\n\n/**\n * Resolves a value to a generator using the generator to yield values. When the generator is complete the fn method is executed with the final result.\n *\n * @function\n * @since v0.0.11\n * @category common\n * @param {Function} fn The function to execute at the end of the generator's resolution\n * @param {*} value The value to resolve with the generator\n * @returns {Generator}\n * @example\n *\n * const generator = resolveToGeneratorWith(\n *   (resolvedValue) => //=> 'foo'\n *   'foo'\n * )\n * generator.next() //=> { done: true } triggers the fn method\n */\nconst resolveToGeneratorWith = curry(baseResolveToGeneratorWith)\n\nexport default resolveToGeneratorWith\n\nexport { baseResolveToGeneratorWith }\n"],"file":"resolveToGeneratorWith.js"}