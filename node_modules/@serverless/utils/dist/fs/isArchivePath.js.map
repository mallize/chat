{"version":3,"sources":["../../src/fs/isArchivePath.js"],"names":["isArchivePath","filePath"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;AAcA,MAAMA,aAAa,GAAIC,QAAD,IAAc;AAClC,MAAI,CAAC,uBAASA,QAAT,CAAL,EAAyB;AACvB,WAAO,KAAP;AACD;;AAED,SACE,uBAAS,MAAT,EAAiBA,QAAjB,KACA,uBAAS,MAAT,EAAiBA,QAAjB,CADA,IAEA,uBAAS,MAAT,EAAiBA,QAAjB,CAFA,IAGA,uBAAS,MAAT,EAAiBA,QAAjB,CAHA,IAIA,uBAAS,KAAT,EAAgBA,QAAhB,CAJA,IAKA,uBAAS,MAAT,EAAiBA,QAAjB,CALA,IAMA,uBAAS,KAAT,EAAgBA,QAAhB,CAPF;AASD,CAdD;;eAgBeD,a","sourcesContent":["import endsWith from '../data/endsWith'\nimport isString from '../lang/isString'\n\n/**\n * Checks if `filePath` is classified as an `Archive`.\n *\n * @function\n * @since v0.0.17\n * @category fs\n * @param {*} filePath The value to check.\n * @returns {boolean} Returns `true` if `filePath` is an archive, else `false`.\n * @example\n *\n * isArchivePath('ok.zip') // => true\n *\n * isArchivePath('./code') // => false\n */\nconst isArchivePath = (filePath) => {\n  if (!isString(filePath)) {\n    return false\n  }\n\n  return (\n    endsWith('.zip', filePath) ||\n    endsWith('.jar', filePath) ||\n    endsWith('.tar', filePath) ||\n    endsWith('.rar', filePath) ||\n    endsWith('.gz', filePath) ||\n    endsWith('.bz2', filePath) ||\n    endsWith('.7z', filePath)\n  )\n}\n\nexport default isArchivePath\n"],"file":"isArchivePath.js"}