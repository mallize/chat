"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fsExtra = require("fs-extra");

var _archiver = _interopRequireDefault(require("archiver"));

var _contains = _interopRequireDefault(require("../data/contains"));

var _curryN = _interopRequireDefault(require("../common/curryN"));

var _forEach = _interopRequireDefault(require("../data/forEach"));

var _isEmpty = _interopRequireDefault(require("../logic/isEmpty"));

var _last = _interopRequireDefault(require("../data/last"));

var _path = _interopRequireDefault(require("path"));

var _readFileIfExists = _interopRequireDefault(require("./readFileIfExists"));

var _split = _interopRequireDefault(require("../data/split"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const VALID_FORMATS = ['zip', 'tar'];

const isValidFormat = format => (0, _contains.default)(format, VALID_FORMATS);

const packDir = (0, _curryN.default)(2,
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (inputDirPath, outputFilePath, append = []) {
    const format = (0, _last.default)((0, _split.default)('.', outputFilePath));

    if (!isValidFormat(format)) {
      throw new Error('Please provide a valid format. Either a "zip" or a "tar"');
    }

    const ignore = (yield (0, _readFileIfExists.default)(_path.default.join(inputDirPath, '.slsignore'))) || [];
    return new Promise((resolve, reject) => {
      const output = (0, _fsExtra.createWriteStream)(outputFilePath);
      const archive = (0, _archiver.default)(format, {
        zlib: {
          level: 9
        }
      });
      output.on('open', () => {
        archive.pipe(output);

        if (!(0, _isEmpty.default)(append)) {
          (0, _forEach.default)(file => {
            const stream = (0, _fsExtra.createReadStream)(file);
            archive.append(stream, {
              name: _path.default.basename(file),
              date: new Date(0)
            });
          }, append);
        }

        archive.glob('**/*', {
          cwd: inputDirPath,
          ignore
        }, {});
        archive.finalize();
      });
      archive.on('error', err => reject(err));
      output.on('close', () => resolve(outputFilePath));
    });
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
var _default = packDir;
exports.default = _default;
//# sourceMappingURL=packDir.js.map