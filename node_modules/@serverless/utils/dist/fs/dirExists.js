"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _curry = _interopRequireDefault(require("../common/curry"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Determines if the given directory exists.
 *
 * This dire
 *
 * Auto curried with placeholder support
 *
 * @function
 * @since v0.0.17
 * @category fs
 * @param {string} srcDir
 * @returns {undefined} None
 * @example
 *
 * copyDirContentsSync('./some/dir', './target/dir')
 */
const dirExists = (0, _curry.default)(
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (dirPath) {
    try {
      const stats = yield _fsExtra.default.lstat(dirPath);
      return stats.isDirectory();
    } catch (error) {
      return false;
    }
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
var _default = dirExists;
exports.default = _default;
//# sourceMappingURL=dirExists.js.map