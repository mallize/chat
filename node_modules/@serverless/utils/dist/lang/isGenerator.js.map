{"version":3,"sources":["../../src/lang/isGenerator.js"],"names":["isGenerator","value","next","throw"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,MAAMA,WAAW,GAAIC,KAAD,IAAWA,KAAK,IAAI,yBAAWA,KAAK,CAACC,IAAjB,CAAT,IAAmC,yBAAWD,KAAK,CAACE,KAAjB,CAAlE;;eAEeH,W","sourcesContent":["import isFunction from './isFunction'\n\n/**\n * Checks whether the given value is a generator.\n *\n * @function\n * @since v0.0.3\n * @category lang\n * @param  {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a generator, else `false`.\n * @example\n *\n * isGenerator((function*() {})())  //=> true\n *\n * isGenerator((function() {})())   //=> false\n *\n * isGenerator({\n *   next: () => {},\n *   throw: () => {}\n * })  //=> true\n */\nconst isGenerator = (value) => value && isFunction(value.next) && isFunction(value.throw)\n\nexport default isGenerator\n"],"file":"isGenerator.js"}