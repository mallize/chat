{"version":3,"sources":["../../src/lang/toFunctionName.js"],"names":["toFunctionName","fn","TypeError","match","String"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;AAgBA,MAAMA,cAAc,GAAG,mBAAK,gBAAL,EAAwBC,EAAD,IAAQ;AACpD,MAAI,CAAC,yBAAWA,EAAX,CAAL,EAAqB;AACnB,UAAM,IAAIC,SAAJ,CAAc,oCAAd,CAAN;AACD,GAHmD,CAIpD;;;AACA,QAAMC,KAAK,GAAGC,MAAM,CAACH,EAAD,CAAN,CAAWE,KAAX,CAAiB,iBAAjB,CAAd;AACA,SAAOA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAAK,CAAC,CAAD,CAAjC;AACD,CAPsB,CAAvB;eASeH,c","sourcesContent":["import defn from '../common/defn'\nimport isFunction from './isFunction'\n\n/**\n * Converts `value` to a the name of a function.\n *\n * @function\n * @since v0.0.17\n * @category lang\n * @param {Function} fn The function to convert\n * @returns {number} Returns the function's name.\n * @example\n *\n * toFunctionName(null)\n * // => throws 'toFunctionName expected a function'\n *\n * toFunctionName(function test() {})\n * // => 'test'\n */\nconst toFunctionName = defn('toFunctionName', (fn) => {\n  if (!isFunction(fn)) {\n    throw new TypeError('toFunctionName expected a function')\n  }\n  // String(x => x) evaluates to 'x => x', so the pattern may not match.\n  const match = String(fn).match(/^function (\\w*)/)\n  return match == null ? '' : match[1]\n})\n\nexport default toFunctionName\n"],"file":"toFunctionName.js"}