{"version":3,"sources":["../../src/lang/isNumber.js"],"names":["isNumber","value"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAMA,QAAQ,GAAIC,KAAD,IACf,OAAOA,KAAP,IAAgB,QAAhB,IAA6B,2BAAaA,KAAb,KAAuB,0BAAYA,KAAZ,KAAsB,iBAD5E;;eAGeD,Q","sourcesContent":["import isObjectLike from './isObjectLike'\nimport toStringTag from './toStringTag'\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `Number.isFinite` method.\n *\n * @function\n * @since v0.0.3\n * @category lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * isNumber(3) // => true\n *\n * isNumber(Number.MIN_VALUE) // => true\n *\n * isNumber(Infinity) // => true\n *\n * isNumber('3') // => false\n */\nconst isNumber = (value) =>\n  typeof value == 'number' || (isObjectLike(value) && toStringTag(value) == '[object Number]')\n\nexport default isNumber\n"],"file":"isNumber.js"}