{"version":3,"sources":["../../src/lang/isPlainObject.js"],"names":["isPlainObject","value","Object","getPrototypeOf","proto"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,MAAMA,aAAa,GAAIC,KAAD,IAAW;AAC/B,MAAI,CAAC,2BAAaA,KAAb,CAAD,IAAwB,yBAAWA,KAAX,KAAqB,iBAAjD,EAAoE;AAClE,WAAO,KAAP;AACD;;AACD,MAAIC,MAAM,CAACC,cAAP,CAAsBF,KAAtB,MAAiC,IAArC,EAA2C;AACzC,WAAO,IAAP;AACD;;AACD,MAAIG,KAAK,GAAGH,KAAZ;;AACA,SAAOC,MAAM,CAACC,cAAP,CAAsBC,KAAtB,MAAiC,IAAxC,EAA8C;AAC5CA,IAAAA,KAAK,GAAGF,MAAM,CAACC,cAAP,CAAsBC,KAAtB,CAAR;AACD;;AACD,SAAOF,MAAM,CAACC,cAAP,CAAsBF,KAAtB,MAAiCG,KAAxC;AACD,CAZD;;eAceJ,a","sourcesContent":["import baseGetTag from './baseGetTag'\nimport isObjectLike from './isObjectLike'\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @function\n * @since v0.0.3\n * @category lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1\n * }\n *\n * isPlainObject(new Foo) // => false\n *\n * isPlainObject([1, 2, 3]) // => false\n *\n * isPlainObject({ 'x': 0, 'y': 0 }) // => true\n *\n * isPlainObject(Object.create(null)) // => true\n */\nconst isPlainObject = (value) => {\n  if (!isObjectLike(value) || baseGetTag(value) != '[object Object]') {\n    return false\n  }\n  if (Object.getPrototypeOf(value) === null) {\n    return true\n  }\n  let proto = value\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto)\n  }\n  return Object.getPrototypeOf(value) === proto\n}\n\nexport default isPlainObject\n"],"file":"isPlainObject.js"}