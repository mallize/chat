{"version":3,"sources":["../../src/lang/isIndex.js"],"names":["reIsUint","isIndex","value","length","MAX_SAFE_INTEGER","type","test"],"mappings":";;;;;;;AAAA;;AAEA;AACA,MAAMA,QAAQ,GAAG,kBAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAM,GAAGC,2BAAjB,KAAsC;AACpD;AACA,QAAMC,IAAI,GAAG,OAAOH,KAApB;AACA,SACE,CAAC,CAACC,MAAF,KACCE,IAAI,IAAI,QAAR,IAAqBA,IAAI,IAAI,QAAR,IAAoBL,QAAQ,CAACM,IAAT,CAAcJ,KAAd,CAD1C,KAECA,KAAK,GAAG,CAAC,CAAT,IAAcA,KAAK,GAAG,CAAR,IAAa,CAA3B,IAAgCA,KAAK,GAAGC,MAH3C;AAKD,CARD;;eAUeF,O","sourcesContent":["import { MAX_SAFE_INTEGER } from '../constants'\n\n/** Used to detect unsigned integer values. */\nconst reIsUint = /^(?:0|[1-9]\\d*)$/\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @function\n * @since v0.0.3\n * @category lang\n * @param {*} value The value to check.\n * @param {number} length [=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n * @example\n *\n * isIndex(0)\n * //=> true\n *\n * isIndex(1)\n * //=> true\n *\n * isIndex(-1)\n * //=> false\n */\nconst isIndex = (value, length = MAX_SAFE_INTEGER) => {\n  // NOTE BRN: max safe length is exactly MAX_SAFE_INTEGER since the length of an array cannot safely be greater than the max integer.\n  const type = typeof value\n  return (\n    !!length &&\n    (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&\n    (value > -1 && value % 1 == 0 && value < length)\n  )\n}\n\nexport default isIndex\n"],"file":"isIndex.js"}