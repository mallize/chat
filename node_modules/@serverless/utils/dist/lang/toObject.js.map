{"version":3,"sources":["../../src/lang/toObject.js"],"names":["toObject","value","Object","result","key"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMA,QAAQ,GAAIC,KAAD,IAAW;AAC1B,MAAIA,KAAK,IAAI,IAAT,IAAiB,yBAAWA,KAAK,CAACD,QAAjB,CAArB,EAAiD;AAC/C,WAAOC,KAAK,CAACD,QAAN,EAAP;AACD;;AACDC,EAAAA,KAAK,GAAGC,MAAM,CAACD,KAAD,CAAd;AACA,QAAME,MAAM,GAAG,EAAf;;AACA,OAAK,MAAMC,GAAX,IAAkBH,KAAlB,EAAyB;AACvBE,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcH,KAAK,CAACG,GAAD,CAAnB;AACD;;AACD,SAAOD,MAAP;AACD,CAVD;;eAYeH,Q","sourcesContent":["import isFunction from './isFunction'\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string keyed properties of `value` to own properties of the plain object.\n *\n * @function\n * @since v0.0.9\n * @category lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2\n * }\n *\n * Foo.prototype.c = 3\n *\n * assign({ 'a': 1 }, new Foo)\n * // => { 'a': 1, 'b': 2 }\n *\n * assign({ 'a': 1 }, toObject(new Foo))\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nconst toObject = (value) => {\n  if (value != null && isFunction(value.toObject)) {\n    return value.toObject()\n  }\n  value = Object(value)\n  const result = {}\n  for (const key in value) {\n    result[key] = value[key]\n  }\n  return result\n}\n\nexport default toObject\n"],"file":"toObject.js"}