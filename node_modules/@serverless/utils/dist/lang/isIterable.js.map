{"version":3,"sources":["../../src/lang/isIterable.js"],"names":["isIterable","value","SYMBOL_ITERATOR"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMA,UAAU,GAAIC,KAAD,IAAWA,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACC,0BAAD,CAAL,IAA0B,IAAzE;;eAEeF,U","sourcesContent":["import { SYMBOL_ITERATOR } from '../constants'\n\n/**\n * Checks if `value` implements the iterator symbol or is iterable\n *\n * @function\n * @since v0.0.3\n * @category lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is iterable, else `false`.\n * @example\n *\n * isIterable('abc')\n * //=> true\n *\n * isIterable(new Map())\n * //=> true\n *\n * isIterable({})\n * //=> false\n *\n * isIterable([])\n * //=> true\n */\nconst isIterable = (value) => value != null && value[SYMBOL_ITERATOR] != null\n\nexport default isIterable\n"],"file":"isIterable.js"}