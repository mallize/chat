{"version":3,"sources":["../../src/lang/isSet.js"],"names":["nodeIsSet","nodeTypes","isSet","value"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA,MAAMA,SAAS,GAAGC,sBAAaA,mBAAUC,KAAzC;AAEA;;;;;;;;;;;;;;;;;AAgBA,MAAMA,KAAK,GAAGF,SAAS,GAClBG,KAAD,IAAWH,SAAS,CAACG,KAAD,CADD,GAElBA,KAAD,IAAW,2BAAaA,KAAb,KAAuB,0BAAYA,KAAZ,KAAsB,cAF5D;eAIeD,K","sourcesContent":["import isObjectLike from './isObjectLike'\nimport nodeTypes from './nodeTypes'\nimport toStringTag from './toStringTag'\n\n/* Node.js helper references. */\nconst nodeIsSet = nodeTypes && nodeTypes.isSet\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @function\n * @since v0.0.10\n * @category lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * isSet(new Set())\n * // => true\n *\n * isSet(new WeakSet())\n * // => false\n */\nconst isSet = nodeIsSet\n  ? (value) => nodeIsSet(value)\n  : (value) => isObjectLike(value) && toStringTag(value) == '[object Set]'\n\nexport default isSet\n"],"file":"isSet.js"}