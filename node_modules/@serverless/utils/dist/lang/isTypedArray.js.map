{"version":3,"sources":["../../src/lang/isTypedArray.js"],"names":["reTypedTag","nodeIsTypedArray","nodeTypes","isTypedArray","value","test"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA,MAAMA,UAAU,GAAG,sEAAnB;AAEA;;AACA,MAAMC,gBAAgB,GAAGC,sBAAaA,mBAAUC,YAAhD;AAEA;;;;;;;;;;;;;;;AAcA,MAAMA,YAAY,GAAGF,gBAAgB,GAChCG,KAAD,IAAWH,gBAAgB,CAACG,KAAD,CADM,GAEhCA,KAAD,IAAW,2BAAaA,KAAb,KAAuBJ,UAAU,CAACK,IAAX,CAAgB,0BAAYD,KAAZ,CAAhB,CAFtC;eAIeD,Y","sourcesContent":["import isObjectLike from './isObjectLike'\nimport nodeTypes from './nodeTypes'\nimport toStringTag from './toStringTag'\n\n/** Used to match `toStringTag` values of typed arrays. */\nconst reTypedTag = /^\\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)\\]$/\n\n/* Node.js helper references. */\nconst nodeIsTypedArray = nodeTypes && nodeTypes.isTypedArray\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @function\n * @since v0.0.3\n * @category lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * isTypedArray(new Uint8Array()) // => true\n *\n * isTypedArray([]) // => false\n */\nconst isTypedArray = nodeIsTypedArray\n  ? (value) => nodeIsTypedArray(value)\n  : (value) => isObjectLike(value) && reTypedTag.test(toStringTag(value))\n\nexport default isTypedArray\n"],"file":"isTypedArray.js"}