{"version":3,"sources":["../../src/lang/isNaN.js"],"names":["isNaN","value"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAMA,KAAK,GAAIC,KAAD,IAAW;AACvB;AACA;AACA;AACA,SAAO,uBAASA,KAAT,KAAmBA,KAAK,IAAI,CAACA,KAApC;AACD,CALD;;eAOeD,K","sourcesContent":["import isNumber from './isNumber'\n\n/**\n * Checks if `value` is `NaN`.\n *\n * **Note:** This method is based on [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as global [`isNaN`](https://mdn.io/isNaN) which returns `true` for `undefined` and other non-number values.\n *\n * @function\n * @since v0.0.13\n * @category lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n * @example\n *\n * isNaN(NaN)\n * // => true\n *\n * isNaN(new Number(NaN))\n * // => true\n *\n * isNaN(undefined)\n * // => false\n */\nconst isNaN = (value) => {\n  // An `NaN` primitive is the only value that is not equal to itself.\n  // Perform the `toStringTag` check first to avoid errors with some\n  // ActiveX objects in IE.\n  return isNumber(value) && value != +value\n}\n\nexport default isNaN\n"],"file":"isNaN.js"}