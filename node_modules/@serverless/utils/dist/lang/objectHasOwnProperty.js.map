{"version":3,"sources":["../../src/lang/objectHasOwnProperty.js"],"names":["hasOwnProperty","Object","prototype","objectHasOwnProperty","object","prop","call"],"mappings":";;;;;;MAAQA,c,GAAmBC,MAAM,CAACC,S,CAA1BF,c;AAER;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,MAAMG,oBAAoB,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkBL,cAAc,CAACM,IAAf,CAAoBF,MAApB,EAA4BC,IAA5B,CAA/C;;eAEeF,oB","sourcesContent":["const { hasOwnProperty } = Object.prototype\n\n/**\n * Returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).\n *\n * See [Object.hasOwnProperty()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty) for more information\n *\n * @function\n * @since v0.0.18\n * @category lang\n * @param {object} object The object on which to check for the property.\n * @param {string} prop The String name or symbol of the property to test.\n * @returns {boolean} A boolean indicating whether or not the object has the specified property as own property.\n *\n * const object = new Object()\n * object.property1 = 42\n *\n * objectHasOwnProperty(object, 'property1')\n * //=> true\n *\n * objectHasOwnProperty(object, 'toString')\n * //=> false\n *\n * objectHasOwnProperty(object, 'hasOwnProperty')\n * //=> false\n */\nconst objectHasOwnProperty = (object, prop) => hasOwnProperty.call(object, prop)\n\nexport default objectHasOwnProperty\n"],"file":"objectHasOwnProperty.js"}