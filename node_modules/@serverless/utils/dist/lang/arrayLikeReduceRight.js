"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _indexEndOffset = _interopRequireDefault(require("./indexEndOffset"));

var _isArrayLike = _interopRequireDefault(require("./isArrayLike"));

var _isGenerator = _interopRequireDefault(require("./isGenerator"));

var _isInteger = _interopRequireDefault(require("./isInteger"));

var _isPromise = _interopRequireDefault(require("./isPromise"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const generatorReduceRight = function* generatorReduceRight(arrayLike, accum, iteratee, index) {
  if ((0, _isGenerator.default)(accum)) {
    accum = yield* accum;
  }

  while (index >= 0) {
    accum = iteratee(accum, arrayLike[index], index);

    if ((0, _isGenerator.default)(accum)) {
      accum = yield* accum;
    } else if ((0, _isPromise.default)(accum)) {
      accum = yield accum;
    }

    index -= 1;
  }

  return accum;
};

const doArrayLikeReduceRight = (arrayLike, accum, iteratee, index) => {
  if ((0, _isPromise.default)(accum)) {
    return accum.then(resolvedAccum => doArrayLikeReduceRight(arrayLike, resolvedAccum, iteratee, index));
  } else if ((0, _isGenerator.default)(accum)) {
    return generatorReduceRight(arrayLike, accum, iteratee, index);
  }

  while (index >= 0) {
    accum = iteratee(accum, arrayLike[index], index);

    if ((0, _isPromise.default)(accum)) {
      return accum.then(resolvedAccum => doArrayLikeReduceRight(arrayLike, resolvedAccum, iteratee, index - 1));
    } else if ((0, _isGenerator.default)(accum)) {
      return generatorReduceRight(arrayLike, accum, iteratee, index - 1);
    }

    index -= 1;
  }

  return accum;
};

const arrayLikeReduceRight = (arrayLike, accum, iteratee, index) => {
  if (!(0, _isArrayLike.default)(arrayLike)) {
    throw new TypeError(`arrayLikeReduceRight expected an array like value. Instead it received ${arrayLike}`);
  }

  const length = arrayLike.length;
  index = (0, _isInteger.default)(index) ? index : length - 1;
  index = (0, _indexEndOffset.default)(index, length);
  return doArrayLikeReduceRight(arrayLike, accum, iteratee, index);
};

var _default = arrayLikeReduceRight;
exports.default = _default;
//# sourceMappingURL=arrayLikeReduceRight.js.map