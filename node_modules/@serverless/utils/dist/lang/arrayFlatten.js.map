{"version":3,"sources":["../../src/lang/arrayFlatten.js"],"names":["shallowFlatten","list","recur","result","ilen","length","idx","item","value","idxj","jlen","arrayFlatten","array","TypeError"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,cAAc,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtC,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,IAAI,GAAGH,IAAI,CAACI,MAAlB;AACA,MAAIC,GAAG,GAAG,CAAV;;AACA,SAAOA,GAAG,GAAGF,IAAb,EAAmB;AACjB,UAAMG,IAAI,GAAGN,IAAI,CAACK,GAAD,CAAjB;;AACA,QAAI,sBAAQC,IAAR,KAAiBN,IAAI,KAAKM,IAA9B,EAAoC;AAClC,YAAMC,KAAK,GAAGN,KAAK,GAAGA,KAAK,CAACK,IAAD,EAAOL,KAAP,CAAR,GAAwBK,IAA3C;AACA,UAAIE,IAAI,GAAG,CAAX;AACA,YAAMC,IAAI,GAAGF,KAAK,CAACH,MAAnB;;AACA,aAAOI,IAAI,GAAGC,IAAd,EAAoB;AAClBP,QAAAA,MAAM,CAACA,MAAM,CAACE,MAAR,CAAN,GAAwBG,KAAK,CAACC,IAAD,CAA7B;AACAA,QAAAA,IAAI,IAAI,CAAR;AACD;AACF,KARD,MAQO;AACLN,MAAAA,MAAM,CAACA,MAAM,CAACE,MAAR,CAAN,GAAwBJ,IAAI,CAACK,GAAD,CAA5B;AACD;;AACDA,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOH,MAAP;AACD,CApBD;AAsBA;;;;;;;;;;;;;;;AAaA,MAAMQ,YAAY,GAAIC,KAAD,IAAW;AAC9B,MAAI,CAAC,sBAAQA,KAAR,CAAL,EAAqB;AACnB,UAAM,IAAIC,SAAJ,CACH,4EAA2ED,KAAM,EAD9E,CAAN;AAGD;;AACD,SAAOZ,cAAc,CAACY,KAAD,EAAQZ,cAAR,CAArB;AACD,CAPD;;eASeW,Y","sourcesContent":["import isArray from './isArray'\n\nconst shallowFlatten = (list, recur) => {\n  const result = []\n  const ilen = list.length\n  let idx = 0\n  while (idx < ilen) {\n    const item = list[idx]\n    if (isArray(item) && list !== item) {\n      const value = recur ? recur(item, recur) : item\n      let idxj = 0\n      const jlen = value.length\n      while (idxj < jlen) {\n        result[result.length] = value[idxj]\n        idxj += 1\n      }\n    } else {\n      result[result.length] = list[idx]\n    }\n    idx += 1\n  }\n  return result\n}\n\n/**\n * Returns a new array by pulling every item out of it (and all its sub-arrays) and putting them in a new array, depth-first.\n *\n * @function\n * @since v0.0.13\n * @category lang\n * @param {Array} array The array to consider.\n * @returns {Array} The flattened list.\n * @example\n *\n * arrayFlatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]])\n * //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nconst arrayFlatten = (array) => {\n  if (!isArray(array)) {\n    throw new TypeError(\n      `arrayFlatten method expected 'array' to be an Array. Instead it received ${array}`\n    )\n  }\n  return shallowFlatten(array, shallowFlatten)\n}\n\nexport default arrayFlatten\n"],"file":"arrayFlatten.js"}