"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _indexEndOffset = _interopRequireDefault(require("./indexEndOffset"));

var _isArrayLike = _interopRequireDefault(require("./isArrayLike"));

var _isGenerator = _interopRequireDefault(require("./isGenerator"));

var _isPromise = _interopRequireDefault(require("./isPromise"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const generatorReduce = function* generatorReduce(arrayLike, accum, iteratee, index) {
  if ((0, _isGenerator.default)(accum)) {
    accum = yield* accum;
  }

  const length = arrayLike.length;

  while (index < length) {
    accum = iteratee(accum, arrayLike[index], index);

    if ((0, _isGenerator.default)(accum)) {
      accum = yield* accum;
    } else if ((0, _isPromise.default)(accum)) {
      accum = yield accum;
    }

    index += 1;
  }

  return accum;
};

const doArrayLikeReduce = (arrayLike, accum, iteratee, index = 0) => {
  const length = arrayLike.length;

  if ((0, _isPromise.default)(accum)) {
    return accum.then(resolvedAccum => doArrayLikeReduce(arrayLike, resolvedAccum, iteratee, index));
  } else if ((0, _isGenerator.default)(accum)) {
    return generatorReduce(arrayLike, accum, iteratee, index);
  }

  while (index < length) {
    accum = iteratee(accum, arrayLike[index], index);

    if ((0, _isPromise.default)(accum)) {
      return accum.then(resolvedAccum => doArrayLikeReduce(arrayLike, resolvedAccum, iteratee, index + 1));
    } else if ((0, _isGenerator.default)(accum)) {
      return generatorReduce(arrayLike, accum, iteratee, index + 1);
    }

    index += 1;
  }

  return accum;
};

const arrayLikeReduce = (arrayLike, accum, iteratee, index = 0) => {
  if (!(0, _isArrayLike.default)(arrayLike)) {
    throw new TypeError(`arrayLikeReduce expected an array like value. Instead it received ${arrayLike}`);
  }

  const length = arrayLike.length;
  index = (0, _indexEndOffset.default)(index, length);
  return doArrayLikeReduce(arrayLike, accum, iteratee, index);
};

var _default = arrayLikeReduce;
exports.default = _default;
//# sourceMappingURL=arrayLikeReduce.js.map