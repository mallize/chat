{"version":3,"sources":["../../src/lang/toType.js"],"names":["toType","value","undefined","slice"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMA,MAAM,GAAIC,KAAD,IAAW;AACxB,SAAOA,KAAK,KAAK,IAAV,GACH,MADG,GAEHA,KAAK,KAAKC,SAAV,GACA,WADA,GAEA,6BAAeD,KAAf,EAAsBE,KAAtB,CAA4B,CAA5B,EAA+B,CAAC,CAAhC,CAJJ;AAKD,CAND;;eAQeH,M","sourcesContent":["import objectToString from './objectToString'\n\n/**\n * Gives a single-word string description of the (native) type of a value, returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not attempt to distinguish user Object types any further, reporting them all as 'Object'.\n *\n * @function\n * @since v0.0.18\n * @category lang\n * @param {*} value The value to test\n * @returns {string}\n * @example\n *\n * toType({}) //=> 'Object'\n * toType(1) //=> 'Number'\n * toType(false) //=> 'Boolean'\n * toType('s') //=> 'String'\n * toType(null) //=> 'Null'\n * toType([]) //=> 'Array'\n * toType(/[A-z]/) //=> 'RegExp'\n * toType(() => {}) //=> 'Function'\n * toType(undefined) //=> 'Undefined'\n */\nconst toType = (value) => {\n  return value === null\n    ? 'Null'\n    : value === undefined\n    ? 'Undefined'\n    : objectToString(value).slice(8, -1)\n}\n\nexport default toType\n"],"file":"toType.js"}