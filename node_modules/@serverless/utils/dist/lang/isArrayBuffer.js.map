{"version":3,"sources":["../../src/lang/isArrayBuffer.js"],"names":["nodeIsArrayBuffer","nodeTypes","isArrayBuffer","value"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA,MAAMA,iBAAiB,GAAGC,sBAAaA,mBAAUC,aAAjD;AAEA;;;;;;;;;;;;;;;;;AAgBA,MAAMA,aAAa,GAAGF,iBAAiB,GAClCG,KAAD,IAAWH,iBAAiB,CAACG,KAAD,CADO,GAElCA,KAAD,IAAW,2BAAaA,KAAb,KAAuB,yBAAWA,KAAX,KAAqB,sBAF3D;eAIeD,a","sourcesContent":["import baseGetTag from './baseGetTag'\nimport isObjectLike from './isObjectLike'\nimport nodeTypes from './nodeTypes'\n\n/* Node.js helper references. */\nconst nodeIsArrayBuffer = nodeTypes && nodeTypes.isArrayBuffer\n\n/**\n * Checks if `value` is classified as an `ArrayBuffer` object.\n *\n * @function\n * @since v0.0.10\n * @category lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n * @example\n *\n * isArrayBuffer(new ArrayBuffer(2))\n * // => true\n *\n * isArrayBuffer(new Array(2))\n * // => false\n */\nconst isArrayBuffer = nodeIsArrayBuffer\n  ? (value) => nodeIsArrayBuffer(value)\n  : (value) => isObjectLike(value) && baseGetTag(value) == '[object ArrayBuffer]'\n\nexport default isArrayBuffer\n"],"file":"isArrayBuffer.js"}