{"version":3,"sources":["../../src/lang/isFunction.js"],"names":["isFunction","value","tag"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;AAcA,MAAMA,UAAU,GAAIC,KAAD,IAAW;AAC5B,MAAI,CAAC,uBAASA,KAAT,CAAL,EAAsB;AACpB,WAAO,KAAP;AACD,GAH2B,CAI5B;AACA;;;AACA,QAAMC,GAAG,GAAG,yBAAWD,KAAX,CAAZ;AACA,SACEC,GAAG,IAAI,mBAAP,IACAA,GAAG,IAAI,wBADP,IAEAA,GAAG,IAAI,4BAFP,IAGAA,GAAG,IAAI,gBAJT;AAMD,CAbD;;eAeeF,U","sourcesContent":["import baseGetTag from './baseGetTag'\nimport isObject from './isObject'\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @function\n * @since v0.0.3\n * @category lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * isFunction(function() {}) // => true\n *\n * isFunction(/abc/) // => false\n */\nconst isFunction = (value) => {\n  if (!isObject(value)) {\n    return false\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  const tag = baseGetTag(value)\n  return (\n    tag == '[object Function]' ||\n    tag == '[object AsyncFunction]' ||\n    tag == '[object GeneratorFunction]' ||\n    tag == '[object Proxy]'\n  )\n}\n\nexport default isFunction\n"],"file":"isFunction.js"}