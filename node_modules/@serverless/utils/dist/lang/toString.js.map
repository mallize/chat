{"version":3,"sources":["../../src/lang/toString.js"],"names":["INFINITY","symbolProto","Symbol","prototype","undefined","symbolToString","toString","value","then","resolvedValue","map","other","call","result"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA,MAAMA,QAAQ,GAAG,IAAI,CAArB;AAEA;;AACA,MAAMC,WAAW,GAAGC,MAAM,GAAGA,MAAM,CAACC,SAAV,GAAsBC,SAAhD;AACA,MAAMC,cAAc,GAAGJ,WAAW,GAAGA,WAAW,CAACK,QAAf,GAA0BF,SAA5D;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAME,QAAQ,GAAIC,KAAD,IAAW;AAC1B,MAAI,wBAAUA,KAAV,CAAJ,EAAsB;AACpB,WAAOA,KAAK,CAACC,IAAN,CAAYC,aAAD,IAAmBH,QAAQ,CAACG,aAAD,CAAtC,CAAP;AACD;;AACD,MAAIF,KAAK,IAAI,IAAb,EAAmB;AACjB,WAAO,EAAP;AACD,GANyB,CAO1B;;;AACA,MAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAOA,KAAP;AACD;;AACD,MAAI,sBAAQA,KAAR,CAAJ,EAAoB;AAClB;AACA,WAAQ,GAAEA,KAAK,CAACG,GAAN,CAAWC,KAAD,IAAYA,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwBL,QAAQ,CAACK,KAAD,CAAtD,CAAgE,EAA1E;AACD;;AACD,MAAI,uBAASJ,KAAT,CAAJ,EAAqB;AACnB,WAAOF,cAAc,GAAGA,cAAc,CAACO,IAAf,CAAoBL,KAApB,CAAH,GAAgC,EAArD;AACD;;AACD,QAAMM,MAAM,GAAI,GAAEN,KAAM,EAAxB;AACA,SAAOM,MAAM,IAAI,GAAV,IAAiB,IAAIN,KAAJ,IAAa,CAACP,QAA/B,GAA0C,IAA1C,GAAiDa,MAAxD;AACD,CApBD;;eAsBeP,Q","sourcesContent":["import isArray from './isArray'\nimport isPromise from './isPromise'\nimport isSymbol from './isSymbol'\n\n/** Used as references for various `Number` constants. */\nconst INFINITY = 1 / 0\n\n/** Used to convert symbols to primitives and strings. */\nconst symbolProto = Symbol ? Symbol.prototype : undefined\nconst symbolToString = symbolProto ? symbolProto.toString : undefined\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`  and `undefined` values. The sign of `-0` is preserved.\n *\n * @function\n * @since v0.0.6\n * @category lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * toString(null)\n * // => ''\n *\n * toString(-0)\n * // => '-0'\n *\n * toString([1, 2, 3])\n * // => '1,2,3'\n */\nconst toString = (value) => {\n  if (isPromise(value)) {\n    return value.then((resolvedValue) => toString(resolvedValue))\n  }\n  if (value == null) {\n    return ''\n  }\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return `${value.map((other) => (other == null ? other : toString(other)))}`\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : ''\n  }\n  const result = `${value}`\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nexport default toString\n"],"file":"toString.js"}