{"version":3,"sources":["../../src/lang/isError.js"],"names":["isError","value","tag","message","name"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;AAgBA,MAAMA,OAAO,GAAIC,KAAD,IAAW;AACzB,MAAI,CAAC,2BAAaA,KAAb,CAAL,EAA0B;AACxB,WAAO,KAAP;AACD;;AACD,QAAMC,GAAG,GAAG,yBAAWD,KAAX,CAAZ;AACA,SACEC,GAAG,IAAI,gBAAP,IACAA,GAAG,IAAI,uBADP,IAEC,OAAOD,KAAK,CAACE,OAAb,IAAwB,QAAxB,IAAoC,OAAOF,KAAK,CAACG,IAAb,IAAqB,QAAzD,IAAqE,CAAC,4BAAcH,KAAd,CAHzE;AAKD,CAVD;;eAYeD,O","sourcesContent":["import baseGetTag from './baseGetTag'\nimport isObjectLike from './isObjectLike'\nimport isPlainObject from './isPlainObject'\n\n/**\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`, `SyntaxError`, `TypeError`, or `URIError` object.\n *\n * @function\n * @since v0.0.10\n * @category lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n * @example\n *\n * isError(new Error)\n * // => true\n *\n * isError(Error)\n * // => false\n */\nconst isError = (value) => {\n  if (!isObjectLike(value)) {\n    return false\n  }\n  const tag = baseGetTag(value)\n  return (\n    tag == '[object Error]' ||\n    tag == '[object DOMException]' ||\n    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value))\n  )\n}\n\nexport default isError\n"],"file":"isError.js"}