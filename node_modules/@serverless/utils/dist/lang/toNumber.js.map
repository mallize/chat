{"version":3,"sources":["../../src/lang/toNumber.js"],"names":["NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toNumber","value","then","resolvedValue","other","valueOf","replace","isBinary","test","slice"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;AACA,MAAMA,GAAG,GAAG,IAAI,CAAhB;AAEA;;AACA,MAAMC,MAAM,GAAG,YAAf;AAEA;;AACA,MAAMC,UAAU,GAAG,oBAAnB;AAEA;;AACA,MAAMC,UAAU,GAAG,YAAnB;AAEA;;AACA,MAAMC,SAAS,GAAG,aAAlB;AAEA;;AACA,MAAMC,YAAY,GAAGC,QAArB;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,MAAI,wBAAUA,KAAV,CAAJ,EAAsB;AACpB,WAAOA,KAAK,CAACC,IAAN,CAAYC,aAAD,IAAmBH,QAAQ,CAACG,aAAD,CAAtC,CAAP;AACD;;AACD,MAAIF,KAAK,IAAI,IAAT,IAAiB,yBAAWA,KAAK,CAACD,QAAjB,CAArB,EAAiD;AAC/C,WAAOC,KAAK,CAACD,QAAN,EAAP;AACD;;AACD,MAAI,OAAOC,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAOA,KAAP;AACD;;AACD,MAAI,uBAASA,KAAT,CAAJ,EAAqB;AACnB,WAAOR,GAAP;AACD;;AACD,MAAI,uBAASQ,KAAT,CAAJ,EAAqB;AACnB,UAAMG,KAAK,GAAG,OAAOH,KAAK,CAACI,OAAb,IAAwB,UAAxB,GAAqCJ,KAAK,CAACI,OAAN,EAArC,GAAuDJ,KAArE;AACAA,IAAAA,KAAK,GAAG,uBAASG,KAAT,IAAmB,GAAEA,KAAM,EAA3B,GAA+BA,KAAvC;AACD;;AACD,MAAI,OAAOH,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAOA,KAAK,KAAK,CAAV,GAAcA,KAAd,GAAsB,CAACA,KAA9B;AACD;;AACDA,EAAAA,KAAK,GAAGA,KAAK,CAACK,OAAN,CAAcZ,MAAd,EAAsB,EAAtB,CAAR;AACA,QAAMa,QAAQ,GAAGX,UAAU,CAACY,IAAX,CAAgBP,KAAhB,CAAjB;AACA,SAAOM,QAAQ,IAAIV,SAAS,CAACW,IAAV,CAAeP,KAAf,CAAZ,GACHH,YAAY,CAACG,KAAK,CAACQ,KAAN,CAAY,CAAZ,CAAD,EAAiBF,QAAQ,GAAG,CAAH,GAAO,CAAhC,CADT,GAEHZ,UAAU,CAACa,IAAX,CAAgBP,KAAhB,IACAR,GADA,GAEA,CAACQ,KAJL;AAKD,CA3BD;;eA6BeD,Q","sourcesContent":["import isFunction from './isFunction'\nimport isObject from './isObject'\nimport isPromise from './isPromise'\nimport isSymbol from './isSymbol'\n\n/** Used as references for various `Number` constants. */\nconst NAN = 0 / 0\n\n/** Used to match leading and trailing whitespace. */\nconst reTrim = /^\\s+|\\s+$/g\n\n/** Used to detect bad signed hexadecimal string values. */\nconst reIsBadHex = /^[-+]0x[0-9a-f]+$/i\n\n/** Used to detect binary string values. */\nconst reIsBinary = /^0b[01]+$/i\n\n/** Used to detect octal string values. */\nconst reIsOctal = /^0o[0-7]+$/i\n\n/** Built-in method references without a dependency on `root`. */\nconst freeParseInt = parseInt\n\n/**\n * Converts `value` to a number.\n *\n * @function\n * @since v0.0.7\n * @category lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * toNumber(3.2)\n * // => 3.2\n *\n * toNumber(Number.MIN_VALUE)\n * // => 5e-324\n *\n * toNumber(Infinity)\n * // => Infinity\n *\n * toNumber('3.2')\n * // => 3.2\n */\nconst toNumber = (value) => {\n  if (isPromise(value)) {\n    return value.then((resolvedValue) => toNumber(resolvedValue))\n  }\n  if (value != null && isFunction(value.toNumber)) {\n    return value.toNumber()\n  }\n  if (typeof value == 'number') {\n    return value\n  }\n  if (isSymbol(value)) {\n    return NAN\n  }\n  if (isObject(value)) {\n    const other = typeof value.valueOf == 'function' ? value.valueOf() : value\n    value = isObject(other) ? `${other}` : other\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value\n  }\n  value = value.replace(reTrim, '')\n  const isBinary = reIsBinary.test(value)\n  return isBinary || reIsOctal.test(value)\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : reIsBadHex.test(value)\n    ? NAN\n    : +value\n}\n\nexport default toNumber\n"],"file":"toNumber.js"}