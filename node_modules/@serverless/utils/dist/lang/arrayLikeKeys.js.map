{"version":3,"sources":["../../src/lang/arrayLikeKeys.js"],"names":["arrayLikeKeys","value","inherited","isArr","Array","isArray","isArg","isBuff","isType","skipIndexes","length","result","index","key","push"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;AAUA,MAAMA,aAAa,GAAG,CAACC,KAAD,EAAQC,SAAR,KAAsB;AAC1C,QAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAd;AACA,QAAMK,KAAK,GAAG,CAACH,KAAD,IAAU,0BAAYF,KAAZ,CAAxB;AACA,QAAMM,MAAM,GAAG,CAACJ,KAAD,IAAU,CAACG,KAAX,IAAoB,uBAASL,KAAT,CAAnC;AACA,QAAMO,MAAM,GAAG,CAACL,KAAD,IAAU,CAACG,KAAX,IAAoB,CAACC,MAArB,IAA+B,2BAAaN,KAAb,CAA9C;AACA,QAAMQ,WAAW,GAAGN,KAAK,IAAIG,KAAT,IAAkBC,MAAlB,IAA4BC,MAAhD;AAL0C,QAMlCE,MANkC,GAMvBT,KANuB,CAMlCS,MANkC;AAO1C,QAAMC,MAAM,GAAG,IAAIP,KAAJ,CAAUK,WAAW,GAAGC,MAAH,GAAY,CAAjC,CAAf;AACA,MAAIE,KAAK,GAAGH,WAAW,GAAG,CAAC,CAAJ,GAAQC,MAA/B;;AACA,SAAO,EAAEE,KAAF,GAAUF,MAAjB,EAAyB;AACvBC,IAAAA,MAAM,CAACC,KAAD,CAAN,GAAiB,GAAEA,KAAM,EAAzB;AACD;;AACD,OAAK,MAAMC,GAAX,IAAkBZ,KAAlB,EAAyB;AACvB,QACE,CAACC,SAAS,IAAI,mCAAqBD,KAArB,EAA4BY,GAA5B,CAAd,KACA,EACEJ,WAAW,MACX;AACCI,IAAAA,GAAG,IAAI,QAAP,IACD;AACCN,IAAAA,MAAM,KAAKM,GAAG,IAAI,QAAP,IAAmBA,GAAG,IAAI,QAA/B,CAFN,IAGD;AACCL,IAAAA,MAAM,KAAKK,GAAG,IAAI,QAAP,IAAmBA,GAAG,IAAI,YAA1B,IAA0CA,GAAG,IAAI,YAAtD,CAJN,IAI8E;AAC7E,0BAAQA,GAAR,EAAaH,MAAb,CAPS,CADb,CAFF,EAYE;AACAC,MAAAA,MAAM,CAACG,IAAP,CAAYD,GAAZ;AACD;AACF;;AACD,SAAOF,MAAP;AACD,CA9BD;;eAgCeX,a","sourcesContent":["import isArguments from './isArguments'\nimport isBuffer from './isBuffer'\nimport isIndex from './isIndex'\nimport isTypedArray from './isTypedArray'\nimport objectHasOwnProperty from './objectHasOwnProperty'\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @function\n * @since v0.0.3\n * @category lang\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nconst arrayLikeKeys = (value, inherited) => {\n  const isArr = Array.isArray(value)\n  const isArg = !isArr && isArguments(value)\n  const isBuff = !isArr && !isArg && isBuffer(value)\n  const isType = !isArr && !isArg && !isBuff && isTypedArray(value)\n  const skipIndexes = isArr || isArg || isBuff || isType\n  const { length } = value\n  const result = new Array(skipIndexes ? length : 0)\n  let index = skipIndexes ? -1 : length\n  while (++index < length) {\n    result[index] = `${index}`\n  }\n  for (const key in value) {\n    if (\n      (inherited || objectHasOwnProperty(value, key)) &&\n      !(\n        skipIndexes &&\n        // Safari 9 has enumerable `arguments.length` in strict mode.\n        (key == 'length' ||\n        // Node.js 0.10 has enumerable non-index properties on buffers.\n        (isBuff && (key == 'offset' || key == 'parent')) ||\n        // PhantomJS 2 has enumerable non-index properties on typed arrays.\n        (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) || // Skip index properties.\n          isIndex(key, length))\n      )\n    ) {\n      result.push(key)\n    }\n  }\n  return result\n}\n\nexport default arrayLikeKeys\n"],"file":"arrayLikeKeys.js"}