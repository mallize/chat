{"version":3,"sources":["../../src/lang/arrayLikeIterator.js"],"names":["iterAt","index","arrayLike","length","value","kdx","done","prevIterAt","arrayLikeIterator","TypeError","next","iter","prev","previous"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,MAAM,GAAG,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACnC,MAAID,KAAK,GAAGC,SAAS,CAACC,MAAlB,IAA4BF,KAAK,IAAI,CAAzC,EAA4C;AAC1C,WAAO;AACLG,MAAAA,KAAK,EAAEF,SAAS,CAACD,KAAD,CADX;AAELA,MAAAA,KAFK;AAGLI,MAAAA,GAAG,EAAEJ,KAHA;AAILK,MAAAA,IAAI,EAAE;AAJD,KAAP;AAMD;;AACD,SAAO;AACLA,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAZD;;AAcA,MAAMC,UAAU,GAAG,CAACN,KAAD,EAAQC,SAAR,KAAsB;AACvC,MAAID,KAAK,GAAGC,SAAS,CAACC,MAAlB,IAA4BF,KAAK,IAAI,CAAzC,EAA4C;AAC1C,WAAO;AACLG,MAAAA,KAAK,EAAEF,SAAS,CAACD,KAAD,CADX;AAELA,MAAAA,KAFK;AAGLI,MAAAA,GAAG,EAAEJ,KAHA;AAILK,MAAAA,IAAI,EAAE;AAJD,KAAP;AAMD;AACF,CATD;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,MAAME,iBAAiB,GAAG,CAACN,SAAD,EAAYD,KAAK,GAAG,CAApB,KAA0B;AAClD,MAAI,CAAC,0BAAYC,SAAZ,CAAL,EAA6B;AAC3B,UAAM,IAAIO,SAAJ,CACH,mFAAkF,uBACjFP,SADiF,CAEjF,EAHE,CAAN;AAKD;;AACD,MAAID,KAAK,KAAK,KAAd,EAAqB;AACnBA,IAAAA,KAAK,GAAGC,SAAS,CAACC,MAAlB;AACD,GAFD,MAEO,IAAIF,KAAK,KAAK,OAAd,EAAuB;AAC5BA,IAAAA,KAAK,GAAG,CAAR;AACD;;AACDA,EAAAA,KAAK,GAAG,6BAAeA,KAAf,EAAsBC,SAAS,CAACC,MAAhC,CAAR;AAEA,SAAO;AACLO,IAAAA,IAAI,EAAE,MAAM;AACV,YAAMC,IAAI,GAAGX,MAAM,CAACC,KAAD,EAAQC,SAAR,CAAnB;AACA,YAAMU,IAAI,GAAGL,UAAU,CAACN,KAAK,GAAG,CAAT,EAAYC,SAAZ,CAAvB;;AACA,UAAID,KAAK,GAAGC,SAAS,CAACC,MAAtB,EAA8B;AAC5BF,QAAAA,KAAK,IAAI,CAAT;AACD;;AACD,+BACKU,IADL;AAEEC,QAAAA;AAFF;AAID,KAXI;AAYLC,IAAAA,QAAQ,EAAE,MAAM;AACd,YAAMF,IAAI,GAAGX,MAAM,CAACC,KAAK,GAAG,CAAT,EAAYC,SAAZ,CAAnB;AACA,YAAMU,IAAI,GAAGL,UAAU,CAACN,KAAD,EAAQC,SAAR,CAAvB;;AACA,UAAID,KAAK,IAAI,CAAb,EAAgB;AACdA,QAAAA,KAAK,IAAI,CAAT;AACD;;AACD,+BACKU,IADL;AAEEC,QAAAA;AAFF;AAID;AAtBI,GAAP;AAwBD,CAvCD;;eAyCeJ,iB","sourcesContent":["import indexEndOffset from './indexEndOffset'\nimport isArrayLike from './isArrayLike'\nimport toString from './toString'\n\nconst iterAt = (index, arrayLike) => {\n  if (index < arrayLike.length && index >= 0) {\n    return {\n      value: arrayLike[index],\n      index,\n      kdx: index,\n      done: false\n    }\n  }\n  return {\n    done: true\n  }\n}\n\nconst prevIterAt = (index, arrayLike) => {\n  if (index < arrayLike.length && index >= 0) {\n    return {\n      value: arrayLike[index],\n      index,\n      kdx: index,\n      done: false\n    }\n  }\n}\n\n/**\n * Returns iterator for an array like value.\n *\n * @function\n * @since v0.0.11\n * @category lang\n * @param {*} arrayLike The array like value to create an iterator for.\n * @param {*} index The index to start at.\n * @return {Iterator} A new iterator for the given array like value\n * @example\n *\n * arrayLikeIterator(['write', 'more'])\n * //=> {\n * //   next: () => ({\n * //     value: *,\n * //     done: boolean,\n * //     kdx: integer,\n * //     index: integer\n * //   }),\n * //   previous: () => ({\n * //     value: *,\n * //     done: boolean,\n * //     kdx: integer,\n * //     index: integer\n * //   })\n * // }\n * arrayLikeIterator('tests')\n * //=> {\n * //   next: () => ({\n * //     value: *,\n * //     done: boolean,\n * //     kdx: integer,\n * //     index: integer\n * //   })\n * //   previous: () => ({\n * //     value: *,\n * //     done: boolean,\n * //     kdx: integer,\n * //     index: integer\n * //   })\n * // }\n */\nconst arrayLikeIterator = (arrayLike, index = 0) => {\n  if (!isArrayLike(arrayLike)) {\n    throw new TypeError(\n      `arrayLikeIterator expected arrayLike to be an ArrayLike value. Instead received ${toString(\n        arrayLike\n      )}`\n    )\n  }\n  if (index === 'END') {\n    index = arrayLike.length\n  } else if (index === 'START') {\n    index = 0\n  }\n  index = indexEndOffset(index, arrayLike.length)\n\n  return {\n    next: () => {\n      const iter = iterAt(index, arrayLike)\n      const prev = prevIterAt(index - 1, arrayLike)\n      if (index < arrayLike.length) {\n        index += 1\n      }\n      return {\n        ...iter,\n        prev\n      }\n    },\n    previous: () => {\n      const iter = iterAt(index - 1, arrayLike)\n      const prev = prevIterAt(index, arrayLike)\n      if (index >= 0) {\n        index -= 1\n      }\n      return {\n        ...iter,\n        prev\n      }\n    }\n  }\n}\n\nexport default arrayLikeIterator\n"],"file":"arrayLikeIterator.js"}