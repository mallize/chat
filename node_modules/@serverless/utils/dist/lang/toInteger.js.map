{"version":3,"sources":["../../src/lang/toInteger.js"],"names":["toInteger","value","then","resolvedValue","result","remainder"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAMA,SAAS,GAAIC,KAAD,IAAW;AAC3B,MAAI,wBAAUA,KAAV,CAAJ,EAAsB;AACpB,WAAOA,KAAK,CAACC,IAAN,CAAYC,aAAD,IAAmBH,SAAS,CAACG,aAAD,CAAvC,CAAP;AACD;;AACD,MAAIF,KAAK,IAAI,IAAT,IAAiB,yBAAWA,KAAK,CAACD,SAAjB,CAArB,EAAkD;AAChD,WAAOC,KAAK,CAACD,SAAN,EAAP;AACD;;AACD,QAAMI,MAAM,GAAG,uBAASH,KAAT,CAAf;AACA,QAAMI,SAAS,GAAGD,MAAM,GAAG,CAA3B;AAEA,SAAOC,SAAS,GAAGD,MAAM,GAAGC,SAAZ,GAAwBD,MAAxC;AACD,CAXD;;eAaeJ,S","sourcesContent":["import isFunction from './isFunction'\nimport isPromise from './isPromise'\nimport toFinite from './toFinite'\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @function\n * @since v0.0.7\n * @category lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * toInteger(3.2)\n * // => 3\n *\n * toInteger(Number.MIN_VALUE)\n * // => 0\n *\n * toInteger(Infinity)\n * // => 1.7976931348623157e+308\n *\n * toInteger('3.2')\n * // => 3\n */\nconst toInteger = (value) => {\n  if (isPromise(value)) {\n    return value.then((resolvedValue) => toInteger(resolvedValue))\n  }\n  if (value != null && isFunction(value.toInteger)) {\n    return value.toInteger()\n  }\n  const result = toFinite(value)\n  const remainder = result % 1\n\n  return remainder ? result - remainder : result\n}\n\nexport default toInteger\n"],"file":"toInteger.js"}