{"version":3,"sources":["../../src/lang/arrayLikeSlice.js"],"names":["arrayLikeSlice","arrayLike","start","end","TypeError","length","undefined","slice","index","result","Array"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;AAeA,MAAMA,cAAc,GAAG,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,GAAnB,KAA2B;AAChD,MAAI,CAAC,0BAAYF,SAAZ,CAAL,EAA6B;AAC3B,UAAM,IAAIG,SAAJ,CACH,8FAA6FH,SAAU,EADpG,CAAN;AAGD;;AACD,MAAII,MAAM,GAAGJ,SAAS,IAAI,IAAb,GAAoB,CAApB,GAAwBA,SAAS,CAACI,MAA/C;;AACA,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,EAAP;AACD;;AACDH,EAAAA,KAAK,GAAGA,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAA5B;AACAC,EAAAA,GAAG,GAAGA,GAAG,KAAKG,SAAR,GAAoBD,MAApB,GAA6BF,GAAnC;;AAEA,MAAID,KAAK,GAAG,CAAZ,EAAe;AACbA,IAAAA,KAAK,GAAG,CAACA,KAAD,GAASG,MAAT,GAAkB,CAAlB,GAAsBA,MAAM,GAAGH,KAAvC;AACD;;AACDC,EAAAA,GAAG,GAAGA,GAAG,GAAGE,MAAN,GAAeA,MAAf,GAAwBF,GAA9B;;AACA,MAAIA,GAAG,GAAG,CAAV,EAAa;AACXA,IAAAA,GAAG,IAAIE,MAAP;AACD;;AACDA,EAAAA,MAAM,GAAGH,KAAK,GAAGC,GAAR,GAAc,CAAd,GAAmBA,GAAG,GAAGD,KAAP,KAAkB,CAA7C;AACAA,EAAAA,KAAK,MAAM,CAAX;;AAEA,MAAI,uBAASD,SAAT,CAAJ,EAAyB;AACvB,WAAOA,SAAS,CAACM,KAAV,CAAgBL,KAAhB,EAAuBC,GAAvB,CAAP;AACD;;AAED,MAAIK,KAAK,GAAG,CAAC,CAAb;AACA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUL,MAAV,CAAf;;AACA,SAAO,EAAEG,KAAF,GAAUH,MAAjB,EAAyB;AACvBI,IAAAA,MAAM,CAACD,KAAD,CAAN,GAAgBP,SAAS,CAACO,KAAK,GAAGN,KAAT,CAAzB;AACD;;AACD,SAAOO,MAAP;AACD,CAjCD;;eAmCeT,c","sourcesContent":["import isArrayLike from './isArrayLike'\nimport isString from './isString'\n\n/**\n * Returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified.\n *\n * @function\n * @since v0.0.13\n * @category lang\n * @param {Array} arrayLike The array like value to slice values from\n * @param {number} start [=0] Zero-based index at which to begin extraction. A negative index will be treated as an offset from the end.\n * @param {number} end [=array.length] Zero-based index before which to end extraction. `arrayLikeSlice` extracts up to but not including end.\n * @returns {Array} A new array with the extraced values\n * @example\n *\n * arrayLikeSlice(['a', 'b', 'c'], 0, 2)\n * //=> ['a', 'b']\n */\nconst arrayLikeSlice = (arrayLike, start, end) => {\n  if (!isArrayLike(arrayLike)) {\n    throw new TypeError(\n      `arrayLikeSlice method expected 'arrayLike' to be an array like value. Instead was received ${arrayLike}`\n    )\n  }\n  let length = arrayLike == null ? 0 : arrayLike.length\n  if (!length) {\n    return []\n  }\n  start = start == null ? 0 : start\n  end = end === undefined ? length : end\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start\n  }\n  end = end > length ? length : end\n  if (end < 0) {\n    end += length\n  }\n  length = start > end ? 0 : (end - start) >>> 0\n  start >>>= 0\n\n  if (isString(arrayLike)) {\n    return arrayLike.slice(start, end)\n  }\n\n  let index = -1\n  const result = new Array(length)\n  while (++index < length) {\n    result[index] = arrayLike[index + start]\n  }\n  return result\n}\n\nexport default arrayLikeSlice\n"],"file":"arrayLikeSlice.js"}