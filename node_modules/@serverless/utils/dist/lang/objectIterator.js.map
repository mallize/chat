{"version":3,"sources":["../../src/lang/objectIterator.js"],"names":["iterAt","index","keys","object","length","key","value","kdx","done","prevIterAt","objectIterator","start","TypeError","next","iter","prev","previous"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,MAAM,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,KAAyB;AACtC,MAAIF,KAAK,GAAGC,IAAI,CAACE,MAAb,IAAuBH,KAAK,IAAI,CAApC,EAAuC;AACrC,UAAMI,GAAG,GAAGH,IAAI,CAACD,KAAD,CAAhB;AACA,WAAO;AACLK,MAAAA,KAAK,EAAEH,MAAM,CAACE,GAAD,CADR;AAELA,MAAAA,GAFK;AAGLE,MAAAA,GAAG,EAAEF,GAHA;AAILG,MAAAA,IAAI,EAAE;AAJD,KAAP;AAMD;;AACD,SAAO;AACLA,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAbD;;AAeA,MAAMC,UAAU,GAAG,CAACR,KAAD,EAAQC,IAAR,EAAcC,MAAd,KAAyB;AAC1C,MAAIF,KAAK,GAAGC,IAAI,CAACE,MAAb,IAAuBH,KAAK,IAAI,CAApC,EAAuC;AACrC,UAAMI,GAAG,GAAGH,IAAI,CAACD,KAAD,CAAhB;AACA,WAAO;AACLK,MAAAA,KAAK,EAAEH,MAAM,CAACE,GAAD,CADR;AAELA,MAAAA,GAFK;AAGLE,MAAAA,GAAG,EAAEF,GAHA;AAILG,MAAAA,IAAI,EAAE;AAJD,KAAP;AAMD;AACF,CAVD;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,MAAME,cAAc,GAAG,CAACP,MAAD,EAASQ,KAAK,GAAG,OAAjB,KAA6B;AAClD,MAAI,CAAC,uBAASR,MAAT,CAAL,EAAuB;AACrB,UAAM,IAAIS,SAAJ,CACH,oEAAmE,uBAAST,MAAT,CAAiB,EADjF,CAAN;AAGD;;AAED,QAAMD,IAAI,GAAG,6BAAeC,MAAf,CAAb;AACA,MAAIF,KAAK,GAAG,CAAZ;;AAEA,MAAIU,KAAK,KAAK,KAAd,EAAqB;AACnBV,IAAAA,KAAK,GAAGC,IAAI,CAACE,MAAb;AACD;;AAED,SAAO;AACLS,IAAAA,IAAI,EAAE,MAAM;AACV,YAAMC,IAAI,GAAGd,MAAM,CAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,CAAnB;AACA,YAAMY,IAAI,GAAGN,UAAU,CAACR,KAAK,GAAG,CAAT,EAAYC,IAAZ,EAAkBC,MAAlB,CAAvB;;AACA,UAAIF,KAAK,GAAGC,IAAI,CAACE,MAAjB,EAAyB;AACvBH,QAAAA,KAAK,IAAI,CAAT;AACD;;AACD,+BACKa,IADL;AAEEC,QAAAA;AAFF;AAID,KAXI;AAYLC,IAAAA,QAAQ,EAAE,MAAM;AACd,YAAMF,IAAI,GAAGd,MAAM,CAACC,KAAK,GAAG,CAAT,EAAYC,IAAZ,EAAkBC,MAAlB,CAAnB;AACA,YAAMY,IAAI,GAAGN,UAAU,CAACR,KAAD,EAAQC,IAAR,EAAcC,MAAd,CAAvB;;AACA,UAAIF,KAAK,IAAI,CAAb,EAAgB;AACdA,QAAAA,KAAK,IAAI,CAAT;AACD;;AACD,+BACKa,IADL;AAEEC,QAAAA;AAFF;AAID;AAtBI,GAAP;AAwBD,CAtCD;;eAwCeL,c","sourcesContent":["import isObject from './isObject'\nimport reflectOwnKeys from './reflectOwnKeys'\nimport toString from './toString'\n\nconst iterAt = (index, keys, object) => {\n  if (index < keys.length && index >= 0) {\n    const key = keys[index]\n    return {\n      value: object[key],\n      key,\n      kdx: key,\n      done: false\n    }\n  }\n  return {\n    done: true\n  }\n}\n\nconst prevIterAt = (index, keys, object) => {\n  if (index < keys.length && index >= 0) {\n    const key = keys[index]\n    return {\n      value: object[key],\n      key,\n      kdx: key,\n      done: false\n    }\n  }\n}\n\n/**\n * Returns iterator for an object's keys and values.\n *\n * Note, iterates over object's own keys and symbols\n *\n * @function\n * @since v0.0.11\n * @category lang\n * @param {*} object The array object to create an iterator for.\n * @return {Iterator} A new iterator for the given object's keys and values\n * @example\n *\n * objectIterator({\n *   write: 'more',\n *   tests: 'asap',\n *   [Symbol('like')]: 'now'\n * })\n * //=> {\n * //   next: () => ({\n * //     value: *,\n * //     done: boolean,\n * //     kdx: string,\n * //     key: string\n * //   })\n * // }\n *\n * iter.next()\n * //=> { value: 'more', key: 'write', kdx: 'write', done: false }\n * iter.next()\n * //=> { value: 'asap', key: 'tests', kdx: 'tests', done: false }\n * iter.next()\n * //=> { value: 'now', key: Symbol('like'), kdx: Symbol('like'), done: false }\n * iter.next()\n * //=> { done: true }\n */\nconst objectIterator = (object, start = 'START') => {\n  if (!isObject(object)) {\n    throw new TypeError(\n      `objectIterator expected object to be an Object. Instead received ${toString(object)}`\n    )\n  }\n\n  const keys = reflectOwnKeys(object)\n  let index = 0\n\n  if (start === 'END') {\n    index = keys.length\n  }\n\n  return {\n    next: () => {\n      const iter = iterAt(index, keys, object)\n      const prev = prevIterAt(index - 1, keys, object)\n      if (index < keys.length) {\n        index += 1\n      }\n      return {\n        ...iter,\n        prev\n      }\n    },\n    previous: () => {\n      const iter = iterAt(index - 1, keys, object)\n      const prev = prevIterAt(index, keys, object)\n      if (index >= 0) {\n        index -= 1\n      }\n      return {\n        ...iter,\n        prev\n      }\n    }\n  }\n}\n\nexport default objectIterator\n"],"file":"objectIterator.js"}