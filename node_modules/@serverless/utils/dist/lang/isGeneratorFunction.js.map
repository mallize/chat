{"version":3,"sources":["../../src/lang/isGeneratorFunction.js"],"names":["toStr","Object","prototype","toString","fnToStr","Function","isFnRegex","hasToStringTag","Symbol","toStringTag","getProto","getPrototypeOf","getGeneratorFunc","e","generatorFunc","GeneratorFunction","isGeneratorFunction","value","test","call","str"],"mappings":";;;;;;AAAA,MAAMA,KAAK,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAA/B;AACA,MAAMC,OAAO,GAAGC,QAAQ,CAACH,SAAT,CAAmBC,QAAnC;AACA,MAAMG,SAAS,GAAG,qBAAlB;AACA,MAAMC,cAAc,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,WAAd,KAA8B,QAArF;AACA,MAAMC,QAAQ,GAAGT,MAAM,CAACU,cAAxB;;AACA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B;AACA,MAAI,CAACL,cAAL,EAAqB;AACnB,WAAO,KAAP;AACD;;AACD,MAAI;AACF,WAAOF,QAAQ,CAAC,uBAAD,CAAR,EAAP;AACD,GAFD,CAEE,OAAOQ,CAAP,EAAU,CAAE;AACf,CARD;;AASA,MAAMC,aAAa,GAAGF,gBAAgB,EAAtC;AACA,MAAMG,iBAAiB,GAAGD,aAAa,GAAGJ,QAAQ,CAACI,aAAD,CAAX,GAA6B,EAApE;AAEA;;;;;;;;;;;;;;AAaA,MAAME,mBAAmB,GAAIC,KAAD,IAAW;AACrC,MAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/B,WAAO,KAAP;AACD;;AACD,MAAIX,SAAS,CAACY,IAAV,CAAed,OAAO,CAACe,IAAR,CAAaF,KAAb,CAAf,CAAJ,EAAyC;AACvC,WAAO,IAAP;AACD;;AACD,MAAI,CAACV,cAAL,EAAqB;AACnB,UAAMa,GAAG,GAAGpB,KAAK,CAACmB,IAAN,CAAWF,KAAX,CAAZ;AACA,WAAOG,GAAG,KAAK,4BAAf;AACD;;AACD,SAAOV,QAAQ,CAACO,KAAD,CAAR,KAAoBF,iBAA3B;AACD,CAZD;;eAceC,mB","sourcesContent":["const toStr = Object.prototype.toString\nconst fnToStr = Function.prototype.toString\nconst isFnRegex = /^\\s*(?:function)?\\*/\nconst hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol'\nconst getProto = Object.getPrototypeOf\nconst getGeneratorFunc = () => {\n  // eslint-disable-line consistent-return\n  if (!hasToStringTag) {\n    return false\n  }\n  try {\n    return Function('return function*() {}')()\n  } catch (e) {}\n}\nconst generatorFunc = getGeneratorFunc()\nconst GeneratorFunction = generatorFunc ? getProto(generatorFunc) : {}\n\n/**\n * Checks whether a function is generator function.\n *\n * @function\n * @since v0.0.3\n * @category lang\n * @param  {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a generator function, else `false`.\n * @example\n *\n * isGeneratorFunction(function*() {})  //=> true\n * isGeneratorFunction(function() {})   //=> false\n */\nconst isGeneratorFunction = (value) => {\n  if (typeof value !== 'function') {\n    return false\n  }\n  if (isFnRegex.test(fnToStr.call(value))) {\n    return true\n  }\n  if (!hasToStringTag) {\n    const str = toStr.call(value)\n    return str === '[object GeneratorFunction]'\n  }\n  return getProto(value) === GeneratorFunction\n}\n\nexport default isGeneratorFunction\n"],"file":"isGeneratorFunction.js"}