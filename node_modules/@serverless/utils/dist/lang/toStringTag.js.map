{"version":3,"sources":["../../src/lang/toStringTag.js"],"names":["dataViewTag","mapTag","objectTag","promiseTag","setTag","weakMapTag","dataViewCtorString","DataView","mapCtorString","Map","promiseCtorString","Promise","setCtorString","Set","weakMapCtorString","WeakMap","toStringTag","baseGetTag","ArrayBuffer","resolve","value","result","Ctor","constructor","undefined","ctorString"],"mappings":";;;;;;;AAAA;;;;AAEA;;AAEA;AACA,MAAMA,WAAW,GAAG,mBAApB;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,SAAS,GAAG,iBAAlB;AACA,MAAMC,UAAU,GAAG,kBAAnB;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,UAAU,GAAG,kBAAnB;AAEA;;AACA,MAAMC,kBAAkB,GAAI,GAAEC,QAAS,EAAvC;AACA,MAAMC,aAAa,GAAI,GAAEC,GAAI,EAA7B;AACA,MAAMC,iBAAiB,GAAI,GAAEC,OAAQ,EAArC;AACA,MAAMC,aAAa,GAAI,GAAEC,GAAI,EAA7B;AACA,MAAMC,iBAAiB,GAAI,GAAEC,OAAQ,EAArC;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,IAAIC,WAAW,GAAGC,mBAAlB,C,CAEA;;AACA,IACGV,QAAQ,IAAIS,WAAW,CAAC,IAAIT,QAAJ,CAAa,IAAIW,WAAJ,CAAgB,CAAhB,CAAb,CAAD,CAAX,IAAiDlB,WAA9D,IACAgB,WAAW,CAAC,IAAIP,GAAJ,EAAD,CAAX,IAA0BR,MAD1B,IAEAe,WAAW,CAACL,OAAO,CAACQ,OAAR,EAAD,CAAX,IAAkChB,UAFlC,IAGAa,WAAW,CAAC,IAAIH,GAAJ,EAAD,CAAX,IAA0BT,MAH1B,IAIAY,WAAW,CAAC,IAAID,OAAJ,EAAD,CAAX,IAA8BV,UALhC,EAME;AACAW,EAAAA,WAAW,GAAII,KAAD,IAAW;AACvB,UAAMC,MAAM,GAAG,yBAAWD,KAAX,CAAf;AACA,UAAME,IAAI,GAAGD,MAAM,IAAInB,SAAV,GAAsBkB,KAAK,CAACG,WAA5B,GAA0CC,SAAvD;AACA,UAAMC,UAAU,GAAGH,IAAI,GAAI,GAAEA,IAAK,EAAX,GAAe,EAAtC;;AAEA,QAAIG,UAAJ,EAAgB;AACd,cAAQA,UAAR;AACE,aAAKnB,kBAAL;AACE,iBAAON,WAAP;;AACF,aAAKQ,aAAL;AACE,iBAAOP,MAAP;;AACF,aAAKS,iBAAL;AACE,iBAAOP,UAAP;;AACF,aAAKS,aAAL;AACE,iBAAOR,MAAP;;AACF,aAAKU,iBAAL;AACE,iBAAOT,UAAP;AAVJ;AAYD;;AACD,WAAOgB,MAAP;AACD,GApBD;AAqBD;;eAEcL,W","sourcesContent":["import baseGetTag from './baseGetTag'\n\n// TODO BRN: Merge this work with toType\n\n/** `Object#toString` result references. */\nconst dataViewTag = '[object DataView]'\nconst mapTag = '[object Map]'\nconst objectTag = '[object Object]'\nconst promiseTag = '[object Promise]'\nconst setTag = '[object Set]'\nconst weakMapTag = '[object WeakMap]'\n\n/** Used to detect maps, sets, and weakmaps. */\nconst dataViewCtorString = `${DataView}`\nconst mapCtorString = `${Map}`\nconst promiseCtorString = `${Promise}`\nconst setCtorString = `${Set}`\nconst weakMapCtorString = `${WeakMap}`\n\n/**\n * Returns a string valued property that is used in the creation of the default string description of an object.\n *\n * See [toStringTag Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) for more information\n *\n * @function\n * @since v0.0.17\n * @category lang\n * @param {*} val The value to get the tag for\n * @return {string} The string tag of the value\n * @example\n *\n * toStringTag(undefined)\n * // => '[object Undefined]'\n *\n * toStringTag({})\n * // => '[object Object]'\n */\nlet toStringTag = baseGetTag\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif (\n  (DataView && toStringTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n  toStringTag(new Map()) != mapTag ||\n  toStringTag(Promise.resolve()) != promiseTag ||\n  toStringTag(new Set()) != setTag ||\n  toStringTag(new WeakMap()) != weakMapTag\n) {\n  toStringTag = (value) => {\n    const result = baseGetTag(value)\n    const Ctor = result == objectTag ? value.constructor : undefined\n    const ctorString = Ctor ? `${Ctor}` : ''\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString:\n          return dataViewTag\n        case mapCtorString:\n          return mapTag\n        case promiseCtorString:\n          return promiseTag\n        case setCtorString:\n          return setTag\n        case weakMapCtorString:\n          return weakMapTag\n      }\n    }\n    return result\n  }\n}\n\nexport default toStringTag\n"],"file":"toStringTag.js"}