"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isFunction = _interopRequireDefault(require("./isFunction"));

var _isObject = _interopRequireDefault(require("./isObject"));

var _isPromise = _interopRequireDefault(require("./isPromise"));

var _isSymbol = _interopRequireDefault(require("./isSymbol"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used as references for various `Number` constants. */
const NAN = 0 / 0;
/** Used to match leading and trailing whitespace. */

const reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */

const reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */

const reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */

const reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */

const freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @function
 * @since v0.0.7
 * @category lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * toNumber(3.2)
 * // => 3.2
 *
 * toNumber(Number.MIN_VALUE)
 * // => 5e-324
 *
 * toNumber(Infinity)
 * // => Infinity
 *
 * toNumber('3.2')
 * // => 3.2
 */

const toNumber = value => {
  if ((0, _isPromise.default)(value)) {
    return value.then(resolvedValue => toNumber(resolvedValue));
  }

  if (value != null && (0, _isFunction.default)(value.toNumber)) {
    return value.toNumber();
  }

  if (typeof value == 'number') {
    return value;
  }

  if ((0, _isSymbol.default)(value)) {
    return NAN;
  }

  if ((0, _isObject.default)(value)) {
    const other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = (0, _isObject.default)(other) ? `${other}` : other;
  }

  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }

  value = value.replace(reTrim, '');
  const isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
};

var _default = toNumber;
exports.default = _default;
//# sourceMappingURL=toNumber.js.map