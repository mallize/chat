"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _curry = _interopRequireDefault(require("../common/curry"));

var _fetch = _interopRequireDefault(require("../fetch/fetch"));

var _isIp = _interopRequireDefault(require("./isIp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Converts an ip address into an location
 *
 * @function
 * @since v0.0.6
 * @category ip
 * @param {string} ip The ip to lookup
 * @returns {{
 *   city: string,
 *   country: string,
 *   countryCode: string,
 *   ip: string,
 *   lat: number,
 *   lng: number,
 *   postalCode: string,
 *   region: string,
 *   regionCode: string,
 * }} The location
 * @example
 *
 * await lookupIp('139.130.4.5')
 * //=> {
 * //   city: 'Belrose',
 * //   country: 'Australia',
 * //   countryCode: 'AU',
 * //   ip: '139.130.4.5',
 * //   lat: -33.7333,
 * //   lng: 151.2167,
 * //   postalCode: '2085',
 * //   region: 'New South Wales',
 * //   regionCode: 'NSW'
 * // }
 */
const lookupIp = (0, _curry.default)(
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (ip) {
    if (!(0, _isIp.default)(ip)) {
      throw new Error(`Expected an IP address. Instead received ${ip}`);
    }

    const response = yield (0, _fetch.default)(`https://freegeoip.app/json/${ip}`);

    if (response.status >= 400) {
      throw new Error(`Bad response from IP lookup server: ${response.body}`);
    }

    const body = yield response.json();
    return {
      city: body.city,
      country: body.country_name,
      countryCode: body.country_code,
      ip: body.ip,
      lat: body.latitude,
      lng: body.longitude,
      postalCode: body.zip_code,
      region: body.region_name,
      regionCode: body.region_code
    };
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
var _default = lookupIp;
exports.default = _default;
//# sourceMappingURL=lookupIp.js.map