{"version":3,"sources":["../../src/ip/lookupIp.js"],"names":["lookupIp","ip","Error","response","status","body","json","city","country","country_name","countryCode","country_code","lat","latitude","lng","longitude","postalCode","zip_code","region","region_name","regionCode","region_code"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,MAAMA,QAAQ,GAAG;AAAA;AAAA;AAAA,+BAAM,WAAOC,EAAP,EAAc;AACnC,QAAI,CAAC,mBAAKA,EAAL,CAAL,EAAe;AACb,YAAM,IAAIC,KAAJ,CAAW,4CAA2CD,EAAG,EAAzD,CAAN;AACD;;AAED,UAAME,QAAQ,SAAS,oBAAO,8BAA6BF,EAAG,EAAvC,CAAvB;;AAEA,QAAIE,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,YAAM,IAAIF,KAAJ,CAAW,uCAAsCC,QAAQ,CAACE,IAAK,EAA/D,CAAN;AACD;;AACD,UAAMA,IAAI,SAASF,QAAQ,CAACG,IAAT,EAAnB;AACA,WAAO;AACLC,MAAAA,IAAI,EAAEF,IAAI,CAACE,IADN;AAELC,MAAAA,OAAO,EAAEH,IAAI,CAACI,YAFT;AAGLC,MAAAA,WAAW,EAAEL,IAAI,CAACM,YAHb;AAILV,MAAAA,EAAE,EAAEI,IAAI,CAACJ,EAJJ;AAKLW,MAAAA,GAAG,EAAEP,IAAI,CAACQ,QALL;AAMLC,MAAAA,GAAG,EAAET,IAAI,CAACU,SANL;AAOLC,MAAAA,UAAU,EAAEX,IAAI,CAACY,QAPZ;AAQLC,MAAAA,MAAM,EAAEb,IAAI,CAACc,WARR;AASLC,MAAAA,UAAU,EAAEf,IAAI,CAACgB;AATZ,KAAP;AAWD,GAtBgB;;AAAA;AAAA;AAAA;AAAA,IAAjB;eAwBerB,Q","sourcesContent":["import curry from '../common/curry'\nimport fetch from '../fetch/fetch'\nimport isIp from './isIp'\n\n/**\n * Converts an ip address into an location\n *\n * @function\n * @since v0.0.6\n * @category ip\n * @param {string} ip The ip to lookup\n * @returns {{\n *   city: string,\n *   country: string,\n *   countryCode: string,\n *   ip: string,\n *   lat: number,\n *   lng: number,\n *   postalCode: string,\n *   region: string,\n *   regionCode: string,\n * }} The location\n * @example\n *\n * await lookupIp('139.130.4.5')\n * //=> {\n * //   city: 'Belrose',\n * //   country: 'Australia',\n * //   countryCode: 'AU',\n * //   ip: '139.130.4.5',\n * //   lat: -33.7333,\n * //   lng: 151.2167,\n * //   postalCode: '2085',\n * //   region: 'New South Wales',\n * //   regionCode: 'NSW'\n * // }\n */\nconst lookupIp = curry(async (ip) => {\n  if (!isIp(ip)) {\n    throw new Error(`Expected an IP address. Instead received ${ip}`)\n  }\n\n  const response = await fetch(`https://freegeoip.app/json/${ip}`)\n\n  if (response.status >= 400) {\n    throw new Error(`Bad response from IP lookup server: ${response.body}`)\n  }\n  const body = await response.json()\n  return {\n    city: body.city,\n    country: body.country_name,\n    countryCode: body.country_code,\n    ip: body.ip,\n    lat: body.latitude,\n    lng: body.longitude,\n    postalCode: body.zip_code,\n    region: body.region_name,\n    regionCode: body.region_code\n  }\n})\n\nexport default lookupIp\n"],"file":"lookupIp.js"}