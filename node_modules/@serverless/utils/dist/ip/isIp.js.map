{"version":3,"sources":["../../src/ip/isIp.js"],"names":["ipv4Maybe","ipv6Block","isIp","value","version","String","test","parts","split","sort","partA","partB","blocks","foundOmissionBlock","foundIPv4TransitionBlock","length","expectedNumberOfBlocks","substr","shift","pop","i"],"mappings":"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","sourcesContent":["import curry from '../common/curry'\nimport isString from '../lang/isString'\n\nconst ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/\nconst ipv6Block = /^[0-9A-F]{1,4}$/i\n\n/**\n * Determines whether the given value is an IP address\n *\n * @function\n * @since v0.0.6\n * @category ip\n * @param {string} value The value to check\n * @param {string | number} version The IP version number '4' or '6'\n * @returns {boolean} True if the value is an ip address, otherwise false\n * @example\n *\n * isIp('255.255.255.0') //=> true\n * isIp('255.255.255.0', 4) //=> true\n * isIp('255.255.255.0', 6) //=> false\n * isIp('2001:db8:abcd:0012:0000:0000:0000:0000') //=> true\n * isIp('2001:db8:abcd:0012:0000:0000:0000:0000', 4) //=> false\n * isIp('2001:db8:abcd:0012:0000:0000:0000:0000', 6) //=> true\n */\nconst isIp = curry((value, version = '') => {\n  if (!isString(value)) {\n    return false\n  }\n  version = String(version)\n  if (!version) {\n    return isIp(value, 4) || isIp(value, 6)\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(value)) {\n      return false\n    }\n    const parts = value.split('.').sort((partA, partB) => partA - partB)\n    return parts[3] <= 255\n  } else if (version === '6') {\n    const blocks = value.split(':')\n    let foundOmissionBlock = false // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    const foundIPv4TransitionBlock = isIp(blocks[blocks.length - 1], 4)\n    const expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8\n\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false\n    }\n    // initial or final ::\n    if (value === '::') {\n      return true\n    } else if (value.substr(0, 2) === '::') {\n      blocks.shift()\n      blocks.shift()\n      foundOmissionBlock = true\n    } else if (value.substr(value.length - 2) === '::') {\n      blocks.pop()\n      blocks.pop()\n      foundOmissionBlock = true\n    }\n\n    let i = 0\n    const { length } = blocks\n    while (i < length) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < length - 1) {\n        if (foundOmissionBlock) {\n          return false // multiple :: in address\n        }\n        foundOmissionBlock = true\n      } else if (foundIPv4TransitionBlock && i === length - 1) {\n        // it has been checked before that the last\n        // block is a valid IPv4 address\n      } else if (!ipv6Block.test(blocks[i])) {\n        return false\n      }\n      i = i + 1\n    }\n    if (foundOmissionBlock) {\n      return length >= 1\n    }\n    return length === expectedNumberOfBlocks\n  }\n  return false\n})\n\nexport default isIp\n"],"file":"isIp.js"}